// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package operation

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// LedgerOperationABI is the input ABI used to generate the binding from.
const LedgerOperationABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"channelId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"tokenType\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"peerAddrs\",\"type\":\"address[2]\"},{\"indexed\":false,\"name\":\"initialDeposits\",\"type\":\"uint256[2]\"}],\"name\":\"OpenChannel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"channelId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"peerAddrs\",\"type\":\"address[2]\"},{\"indexed\":false,\"name\":\"deposits\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"name\":\"withdrawals\",\"type\":\"uint256[2]\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"channelId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"seqNums\",\"type\":\"uint256[2]\"}],\"name\":\"SnapshotStates\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"channelId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"seqNums\",\"type\":\"uint256[2]\"}],\"name\":\"IntendSettle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"channelId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"payId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"peerFrom\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClearOnePay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"channelId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"settleBalance\",\"type\":\"uint256[2]\"}],\"name\":\"ConfirmSettle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"channelId\",\"type\":\"bytes32\"}],\"name\":\"ConfirmSettleFail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"channelId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"IntendWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"channelId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"recipientChannelId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"deposits\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"name\":\"withdrawals\",\"type\":\"uint256[2]\"}],\"name\":\"ConfirmWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"channelId\",\"type\":\"bytes32\"}],\"name\":\"VetoWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"channelId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"recipientChannelId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"deposits\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"name\":\"withdrawals\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"name\":\"seqNum\",\"type\":\"uint256\"}],\"name\":\"CooperativeWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"channelId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"settleBalance\",\"type\":\"uint256[2]\"}],\"name\":\"CooperativeSettle\",\"type\":\"event\"}]"

// LedgerOperationBin is the compiled bytecode used for deploying new contracts.
var LedgerOperationBin = "0x615b0462000027600b82828239805160001a60731461001a57fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101035760003560e060020a9004806383e0fef5116100a5578063c98c925111610074578063c98c925114610486578063e59f3686146104a3578063eb4de33714610527578063ff7fb4111461055757610103565b806383e0fef5146103c4578063bb3d0f2b146103f4578063bd199ca514610424578063bd9d31571461044157610103565b806360297df3116100e157806360297df31461024b578063742fb5071461028057806379e90087146103045780637a2654ed1461038857610103565b80630bdc54111461010857806344e58d511461018e578063594db6e3146101c7575b600080fd5b81801561011457600080fd5b5061018c6004803603604081101561012b57600080fd5b8135919081019060408101602082013564010000000081111561014d57600080fd5b82018360208201111561015f57600080fd5b8035906020019184600183028401116401000000008311171561018157600080fd5b5090925090506105f0565b005b6101ab600480360360208110156101a457600080fd5b5035610c23565b60408051600160a060020a039092168252519081900360200190f35b8180156101d357600080fd5b5061018c600480360360408110156101ea57600080fd5b8135919081019060408101602082013564010000000081111561020c57600080fd5b82018360208201111561021e57600080fd5b8035906020019184600183028401116401000000008311171561024057600080fd5b509092509050610c37565b61026e6004803603604081101561026157600080fd5b50803590602001356115a5565b60408051918252519081900360200190f35b81801561028c57600080fd5b5061018c600480360360408110156102a357600080fd5b813591908101906040810160208201356401000000008111156102c557600080fd5b8201836020820111156102d757600080fd5b803590602001918460018302840111640100000000831117156102f957600080fd5b5090925090506115bb565b81801561031057600080fd5b5061018c6004803603604081101561032757600080fd5b8135919081019060408101602082013564010000000081111561034957600080fd5b82018360208201111561035b57600080fd5b8035906020019184600183028401116401000000008311171561037d57600080fd5b509092509050611988565b81801561039457600080fd5b5061018c600480360360808110156103ab57600080fd5b5080359060208101359060408101359060600135611eb4565b8180156103d057600080fd5b5061018c600480360360408110156103e757600080fd5b5080359060200135612016565b81801561040057600080fd5b5061018c6004803603604081101561041757600080fd5b508035906020013561242d565b6101ab6004803603602081101561043a57600080fd5b5035612680565b81801561044d57600080fd5b5061018c6004803603608081101561046457600080fd5b50803590602081013590600160a060020a036040820135169060600135612690565b6101ab6004803603602081101561049c57600080fd5b5035612964565b8180156104af57600080fd5b5061018c600480360360408110156104c657600080fd5b813591908101906040810160208201356401000000008111156104e857600080fd5b8201836020820111156104fa57600080fd5b8035906020019184600183028401116401000000008311171561051c57600080fd5b509092509050612974565b81801561053357600080fd5b5061018c6004803603604081101561054a57600080fd5b5080359060200135612d42565b81801561056357600080fd5b5061018c6004803603608081101561057a57600080fd5b813591602081013591600160a060020a0360408301351691908101906080810160608201356401000000008111156105b157600080fd5b8201836020820111156105c357600080fd5b803590602001918460018302840111640100000000831117156105e557600080fd5b509092509050612ed3565b6105f8615804565b61063783838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061304492505050565b805151909150610645615817565b61066a836000015160008151811061065957fe5b60200260200101516000015161318d565b905060005b82811015610c1a57815160008181526006890160205260409020610699813363ffffffff6132d716565b1561072a576001600382015460ff1660048111156106b357fe5b14806106d157506002600382015460ff1660048111156106cf57fe5b145b610725576040805160e560020a62461bcd02815260206004820152601960248201527f50656572206368616e6e656c20737461747573206572726f7200000000000000604482015290519081900360640190fd5b610794565b6002600382015460ff16600481111561073f57fe5b14610794576040805160e560020a62461bcd02815260206004820152601c60248201527f4e6f6e70656572206368616e6e656c20737461747573206572726f7200000000604482015290519081900360640190fd5b805415806107a25750805443105b6107f6576040805160e560020a62461bcd02815260206004820152601c60248201527f536574746c652068617320616c72656164792066696e616c697a656400000000604482015290519081900360640190fd5b60008660000151848151811061080857fe5b6020026020010151600001516040518082805190602001908083835b602083106108435780518252601f199092019160209182019101610824565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020905060608760000151858151811061088457fe5b6020026020010151602001519050600086604001511115610a5d576108b083838363ffffffff61330e16565b6108f2576040805160e560020a62461bcd0281526020600482015260146024820152600080516020615ab0833981519152604482015290519081900360640190fd5b600061090b8760200151856133aa90919063ffffffff16565b9050600084600401826002811061091e57fe5b6008020160030190506001600481111561093457fe5b600386015460ff16600481111561094757fe5b141561099d57805460408901511015610998576040805160e560020a62461bcd02815260206004820152600c6024820152600080516020615a90833981519152604482015290519081900360640190fd5b610a04565b6002600386015460ff1660048111156109b257fe5b1415610a02578054604089015111610998576040805160e560020a62461bcd02815260206004820152600c6024820152600080516020615a90833981519152604482015290519081900360640190fd5bfe5b6040880151815560608801516020908101518101516001830155608089015101516002820181905560a0890151600383015515610a465760c088015160048201555b610a568d87848b6080015161343d565b5050610b46565b6040860151610a0257825415610abd576040805160e560020a62461bcd02815260206004820152601360248201527f696e74656e64536574746c65206265666f726500000000000000000000000000604482015290519081900360640190fd5b80516001148015610af25750610af28282600081518110610ada57fe5b6020026020010151856137119092919063ffffffff16565b610b46576040805160e560020a62461bcd02815260206004820152601060248201527f436865636b20736967206661696c656400000000000000000000000000000000604482015290519081900360640190fd5b610b5787600163ffffffff61374216565b851415610b6d57610b688b85613757565b610c0a565b610b7e87600163ffffffff61374216565b851015610a0257610b9b8860000151866001018151811061065957fe5b8051909650841115610bf7576040805160e560020a62461bcd02815260206004820152601860248201527f4e6f6e2d617363656e64696e67206368616e6e656c4964730000000000000000604482015290519081900360640190fd5b8551841015610b6857610b688b85613757565b50506001909201915061066f9050565b50505050505050565b6002810154600160a060020a03165b919050565b610c3f61586d565b610c7e83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506137f592505050565b9050610c88615887565b8151610c9390613943565b80516020015151909150600214610cf4576040805160e560020a62461bcd02815260206004820152600c60248201527f57726f6e67206c656e6774680000000000000000000000000000000000000000604482015290519081900360640190fd5b8060200151431115610d50576040805160e560020a62461bcd02815260206004820152601460248201527f4f70656e20646561646c696e6520706173736564000000000000000000000000604482015290519081900360640190fd5b610d586158b5565b50805151610d646158cc565b6040518060400160405280846000015160200151600081518110610d8457fe5b6020026020010151602001518152602001846000015160200151600181518110610daa57fe5b6020026020010151602001518152509050610dc36158cc565b6040518060400160405280856000015160200151600081518110610de357fe5b602002602001015160000151600160a060020a0316600160a060020a03168152602001856000015160200151600181518110610e1b57fe5b60209081029190910181015151600160a060020a0390811690925282015182519293508116911610610e97576040805160e560020a62461bcd02815260206004820152601c60248201527f5065657220616464727320617265206e6f7420617363656e64696e6700000000604482015290519081900360640190fd5b600388015485516040518151600160a060020a03909316926000929190819060208401908083835b60208310610ede5780518252601f199092019160209182019101610ebf565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050600080610f1c8c858786613a08565b9150915087604001518160010181905550610f398c826001613c36565b610f4287613d56565b805160028084018054909291839160ff1916906001908490811115610f6357fe5b0217905550602091820151815474ffffffffffffffffffffffffffffffffffffffff001916610100600160a060020a039283160217909155865160048401805491831673ffffffffffffffffffffffffffffffffffffffff199283161790558851600585015587830151600c85018054909216921691909117905586810151600d830155890151610ff7908290859061330e565b611039576040805160e560020a62461bcd0281526020600482015260146024820152600080516020615ab0833981519152604482015290519081900360640190fd5b8660200151600160a060020a0316827f9d9f66221370175606b4085f28a419b201c9b6dafd9e0c4520e5bf69ea3e166d8960000151600281111561107957fe5b888a6040518084815260200183600260200280838360005b838110156110a9578181015183820152602001611091565b5050505090500182600260200280838360005b838110156110d45781810151838201526020016110bc565b50505050905001935050505060405180910390a3600061110a87600160200201518860005b60200201519063ffffffff613ddf16565b905080611176573415611167576040805160e560020a62461bcd02815260206004820152601260248201527f6d73672e76616c7565206973206e6f7420300000000000000000000000000000604482015290519081900360640190fd5b505050505050505050506115a0565b60058d015460ff16156111fa57602080890151600160a060020a0316600090815260048f0190915260409020548111156111fa576040805160e560020a62461bcd02815260206004820152601560248201527f42616c616e63652065786365656473206c696d69740000000000000000000000604482015290519081900360640190fd5b60018851600281111561120957fe5b141561141257606089015187816002811061122057fe5b6020020151341461127b576040805160e560020a62461bcd02815260206004820152601260248201527f6d73672e76616c7565206d69736d617463680000000000000000000000000000604482015290519081900360640190fd5b600088826002811061128957fe5b602002015111156113075785600160a060020a031663d68d9d4e8983600281106112af57fe5b6020020151866040518363ffffffff1660e060020a028152600401808281526020019150506000604051808303818588803b1580156112ed57600080fd5b505af1158015611301573d6000803e3d6000fd5b50505050505b600061131a60018363ffffffff61374216565b9050600089826002811061132a57fe5b6020020151111561140b5760018f0154600160a060020a0316637e1cd43189836002811061135457fe5b602002015189888d866002811061136757fe5b60200201516040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184600160a060020a0316600160a060020a03168152602001838152602001828152602001945050505050602060405180830381600087803b1580156113de57600080fd5b505af11580156113f2573d6000803e3d6000fd5b505050506040513d602081101561140857600080fd5b50505b5050611595565b60028851600281111561142157fe5b1415610a0257341561147d576040805160e560020a62461bcd02815260206004820152601260248201527f6d73672e76616c7565206973206e6f7420300000000000000000000000000000604482015290519081900360640190fd5b602088015160005b60028110156114ee5788816002811061149a57fe5b60200201516114a8576114e6565b6114e68882600281106114b757fe5b6020020151308b84600281106114c957fe5b6020020151600160a060020a03861692919063ffffffff613df116565b600101611485565b50611509600160a060020a038216878463ffffffff613ea016565b604080517fc108bb4000000000000000000000000000000000000000000000000000000000815260048101869052600160a060020a0383811660248301526044820185905291519188169163c108bb409160648082019260009290919082900301818387803b15801561157b57600080fd5b505af115801561158f573d6000803e3d6000fd5b50505050505b505050505050505050505b505050565b6000818152602083905260409020545b92915050565b6115c361586d565b61160283838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613fe092505050565b905061160c6158ea565b81516116179061412e565b805160808201516000828152600689016020526040902092935090916001600382015460ff16600481111561164857fe5b1461168b576040805160e560020a62461bcd0281526020600482015260146024820152600080516020615a4d833981519152604482015290519081900360640190fd5b600085600001516040518082805190602001908083835b602083106116c15780518252601f1990920191602091820191016116a2565b51815160209384036101000a6000190180199092169116179052604051919093018190039020918a01519194506116ff93508592508491905061330e565b611741576040805160e560020a62461bcd0281526020600482015260146024820152600080516020615ab0833981519152604482015290519081900360640190fd5b6014820154602086015161175a9163ffffffff61374216565b60011461179f576040805160e560020a62461bcd02815260206004820152600c6024820152600080516020615a90833981519152604482015290519081900360640190fd5b84606001514311156117fb576040805160e560020a62461bcd02815260206004820152601860248201527f576974686472617720646561646c696e65207061737365640000000000000000604482015290519081900360640190fd5b6040850151805160208088015160148601559091015161182284838363ffffffff61421516565b61182a6158cc565b6118326158cc565b8573__LedgerChannel_________________________63c8ed149e90916040518263ffffffff1660e060020a0281526004018082815260200191505060c06040518083038186803b15801561188657600080fd5b505af415801561189a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060c08110156118bf57600080fd5b506020808b0151604080518781528185019650608090940194508a93600160a060020a038916938d937f1b87d077d9b706e42883b454b67730633fd6b4b29f9a9cf5f57c278c54f51c8f938a938a938a939290820190859080838360005b8381101561193557818101518382015260200161191d565b5050505090500183600260200280838360005b83811015611960578181015183820152602001611948565b5050505090500182815260200194505050505060405180910390a46115958d8986868b61427c565b61199061586d565b6119cf83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061448392505050565b90506119d961591d565b81516119e4906145d1565b805160008181526006880160205260409020919250906001600382015460ff166004811115611a0f57fe5b1480611a2d57506002600382015460ff166004811115611a2b57fe5b145b611a6f576040805160e560020a62461bcd0281526020600482015260146024820152600080516020615a4d833981519152604482015290519081900360640190fd5b600084600001516040518082805190602001908083835b60208310611aa55780518252601f199092019160209182019101611a86565b51815160209384036101000a600019018019909216911617905260405191909301819003902091890151919450611ae393508592508491905061330e565b611b25576040805160e560020a62461bcd0281526020600482015260146024820152600080516020615ab0833981519152604482015290519081900360640190fd5b611b2d6158cc565b50604080518082019091526004830154600160a060020a039081168252600c84015416602080830191909152600784015490860151118015611b765750600f8301546020860151115b611bb8576040805160e560020a62461bcd02815260206004820152600c6024820152600080516020615a90833981519152604482015290519081900360640190fd5b4385606001511015611c14576040805160e560020a62461bcd02815260206004820152601660248201527f536574746c6520646561646c696e652070617373656400000000000000000000604482015290519081900360640190fd5b8060006020020151600160a060020a03168560400151600081518110611c3657fe5b602002602001015160000151600160a060020a0316148015611c8c57508060016020020151600160a060020a03168560400151600181518110611c7557fe5b602002602001015160000151600160a060020a0316145b611ce0576040805160e560020a62461bcd02815260206004820152601860248201527f536574746c65206163636f756e7473206d69736d617463680000000000000000604482015290519081900360640190fd5b611ce86158cc565b60405180604001604052808760400151600081518110611d0457fe5b60200260200101516020015181526020018760400151600181518110611d2657fe5b60200260200101516020015181525090508373__LedgerChannel_________________________63d6b89e3a90916040518263ffffffff1660e060020a0281526004018082815260200191505060206040518083038186803b158015611d8b57600080fd5b505af4158015611d9f573d6000803e3d6000fd5b505050506040513d6020811015611db557600080fd5b50516020820151611dc8908360006110f9565b14611e1d576040805160e560020a62461bcd02815260206004820152601460248201527f42616c616e63652073756d206d69736d61746368000000000000000000000000604482015290519081900360640190fd5b611e298a856003613c36565b847f6c666557dc97fd52cd2d9d6dd6d109e501ffdb831abeecf13aafeeaf762ee1fd826040518082600260200280838360005b83811015611e74578181015183820152602001611e5c565b5050505090500191505060405180910390a26002840154611ea8908b9087906101009004600160a060020a03168585614763565b50505050505050505050565b6000838152600685016020526040902060158101336001600384015460ff166004811115611ede57fe5b14611f21576040805160e560020a62461bcd0281526020600482015260146024820152600080516020615a4d833981519152604482015290519081900360640190fd5b8154600160a060020a031615611f81576040805160e560020a62461bcd02815260206004820152601e60248201527f50656e64696e6720776974686472617720696e74656e74206578697374730000604482015290519081900360640190fd5b611f91838263ffffffff6132d716565b611f9a57600080fd5b8154600160a060020a03821673ffffffffffffffffffffffffffffffffffffffff1990911681178355600183018690554360028401556003830185905560408051878152905188917f97883669625c4ff7f5432b4ca33fe75fb5fee985deb196a967e5758f846170fe919081900360200190a350505050505050565b600081815260068301602052604090206001600382015460ff16600481111561203b57fe5b1461207e576040805160e560020a62461bcd0281526020600482015260146024820152600080516020615a4d833981519152604482015290519081900360640190fd5b6015810154600160a060020a03166120e0576040805160e560020a62461bcd02815260206004820152601a60248201527f4e6f2070656e64696e6720776974686472617720696e74656e74000000000000604482015290519081900360640190fd5b600181015460178201546120f99163ffffffff613ddf16565b431015612150576040805160e560020a62461bcd02815260206004820152601360248201527f44697370757465206e6f742074696d656f757400000000000000000000000000604482015290519081900360640190fd5b60158101805460168301805460188501805473ffffffffffffffffffffffffffffffffffffffff19851690955560009283905560178601839055829055600160a060020a0390921692906121aa858563ffffffff6133aa16565b905060006121bf60018363ffffffff61374216565b905060048601600061225a8285600281106121d657fe5b600802016003016004015461224e8487600281106121f057fe5b600802016003016001015461224e86896002811061220a57fe5b600802016002015461224e888a6002811061222157fe5b6008020160030160010154898c6002811061223857fe5b6008020160010154613ddf90919063ffffffff16565b9063ffffffff61374216565b9050808611156122b4576040805160e560020a62461bcd02815260206004820152601560248201527f457863656564207769746864726177206c696d69740000000000000000000000604482015290519081900360640190fd5b6122c588888863ffffffff61421516565b6122cd6158cc565b6122d56158cc565b8973__LedgerChannel_________________________63c8ed149e90916040518263ffffffff1660e060020a0281526004018082815260200191505060c06040518083038186803b15801561232957600080fd5b505af415801561233d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060c081101561236257600080fd5b50604080518a81528183019450608090920192508891600160a060020a038c16918e917fe8110b4ee08638c48f6a4d5f726927df4e541893efa9d2c2c47a6b889041826e918d9188918891906020820190849080838360005b838110156123d35781810151838201526020016123bb565b5050505090500182600260200280838360005b838110156123fe5781810151838201526020016123e6565b50505050905001935050505060405180910390a461241f8c8c8b8b8b61427c565b505050505050505050505050565b6000818152600683016020526040902060048101436002600384015460ff16600481111561245757fe5b1461249a576040805160e560020a62461bcd0281526020600482015260146024820152600080516020615a4d833981519152604482015290519081900360640190fd5b82548110156124f3576040805160e560020a62461bcd02815260206004820152601760248201527f536574746c65206973206e6f742066696e616c697a6564000000000000000000604482015290519081900360640190fd5b600582015415806125075750600682015481115b80156125225750600d82015415806125225750600e82015481115b612576576040805160e560020a62461bcd02815260206004820152601a60248201527f5061796d656e747320617265206e6f742066696e616c697a6564000000000000604482015290519081900360640190fd5b60006125806158cc565b61258985614853565b91509150816125d15761259c8786614a45565b60405186907fa6549eb18490d42e7ec93f42115d1ee11b706d04077be9597034dd73ec8bcb3690600090a2505050505061267c565b6125dd87866003613c36565b857f728ddd8c5acda5947c34db8d759c66ae70884f526ff9b93637d351b012ef3206826040518082600260200280838360005b83811015612628578181015183820152602001612610565b5050505090500191505060405180910390a26002850154604080518082019091528554600160a060020a039081168252600887015481166020830152610c1a928a928a926101009092049091169085614763565b5050565b60030154600160a060020a031690565b346126ac8585856126a7868663ffffffff613ddf16565b614ad3565b60008481526006860160205260409020600160028083015460ff16908111156126d157fe5b141561281b578115612760576003860154604080517fd68d9d4e000000000000000000000000000000000000000000000000000000008152600481018890529051600160a060020a039092169163d68d9d4e918591602480830192600092919082900301818588803b15801561274657600080fd5b505af115801561275a573d6000803e3d6000fd5b50505050505b82156128165760018601546003870154604080517f7e1cd431000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a039283166024820152604481018990526064810187905290519190921691637e1cd4319160848083019260209291908290030181600087803b1580156127e957600080fd5b505af11580156127fd573d6000803e3d6000fd5b505050506040513d602081101561281357600080fd5b50505b61295c565b60028181015460ff168181111561282e57fe5b1415610a0257811561288a576040805160e560020a62461bcd02815260206004820152601260248201527f6d73672e76616c7565206973206e6f7420300000000000000000000000000000604482015290519081900360640190fd5b60028101546101009004600160a060020a03166128a981333087613df1565b60038701546128cb90600160a060020a0383811691168663ffffffff613ea016565b6003870154604080517fc108bb4000000000000000000000000000000000000000000000000000000000815260048101899052600160a060020a038481166024830152604482018890529151919092169163c108bb4091606480830192600092919082900301818387803b15801561294257600080fd5b505af1158015612956573d6000803e3d6000fd5b50505050505b505050505050565b60010154600160a060020a031690565b61297c615804565b6129bb83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061304492505050565b8051519091506129c9615817565b6129dd836000015160008151811061065957fe5b905060005b82811015610c1a578151600081815260068901602052604090206001600382015460ff166004811115612a1157fe5b14612a54576040805160e560020a62461bcd0281526020600482015260146024820152600080516020615a4d833981519152604482015290519081900360640190fd5b600086600001518481518110612a6657fe5b6020026020010151600001516040518082805190602001908083835b60208310612aa15780518252601f199092019160209182019101612a82565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050606087600001518581518110612ae257fe5b6020026020010151602001519050612b0582828561330e9092919063ffffffff16565b612b47576040805160e560020a62461bcd0281526020600482015260146024820152600080516020615ab0833981519152604482015290519081900360640190fd5b6000612b608760200151856133aa90919063ffffffff16565b90506000846004018260028110612b7357fe5b6008020160030190508060000154886040015111612bc9576040805160e560020a62461bcd02815260206004820152600c6024820152600080516020615a90833981519152604482015290519081900360640190fd5b604088015181556060880151602090810151015160018083019190915560c08901516004830155612c01908a9063ffffffff61374216565b871415612c7257857fd0793cc4198bf052a6d91a9a1273c4af39f02a91b0e19029477511c278c5b271612c3387614e23565b6040518082600260200280838360005b83811015612c5b578181015183820152602001612c43565b5050505090500191505060405180910390a2612d30565b612c8389600163ffffffff61374216565b871015610a0257612ca08a60000151886001018151811061065957fe5b8051909850861115612cfc576040805160e560020a62461bcd02815260206004820152601860248201527f4e6f6e2d617363656e64696e67206368616e6e656c4964730000000000000000604482015290519081900360640190fd5b8751861015612d3057857fd0793cc4198bf052a6d91a9a1273c4af39f02a91b0e19029477511c278c5b271612c3387614e23565b5050600190940193506129e292505050565b600081815260068301602052604090206001600382015460ff166004811115612d6757fe5b14612daa576040805160e560020a62461bcd0281526020600482015260146024820152600080516020615a4d833981519152604482015290519081900360640190fd5b6015810154600160a060020a0316612e0c576040805160e560020a62461bcd02815260206004820152601a60248201527f4e6f2070656e64696e6720776974686472617720696e74656e74000000000000604482015290519081900360640190fd5b612e1c813363ffffffff6132d716565b612e70576040805160e560020a62461bcd02815260206004820152601660248201527f6d73672e73656e646572206973206e6f74207065657200000000000000000000604482015290519081900360640190fd5b60158101805473ffffffffffffffffffffffffffffffffffffffff19169055600060168201819055601782018190556018820181905560405183917f9a8a5493b616f074b3f754b5fd66049c8e7980f01547289e5e31808485c6002c91a2505050565b600084815260068601602052604090206002600382015460ff166004811115612ef857fe5b14612f3b576040805160e560020a62461bcd0281526020600482015260146024820152600080516020615a4d833981519152604482015290519081900360640190fd5b6000612f4d828663ffffffff6133aa16565b90506000848460405180838380828437604051920182900390912094506000935050506004850190508360028110612f8157fe5b60080201600301905081816002015414612fe5576040805160e560020a62461bcd02815260206004820152601260248201527f4c6973742068617368206d69736d617463680000000000000000000000000000604482015290519081900360640190fd5b612fed615948565b61302c87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250614e4b92505050565b602081015160028401559050611ea88a8a868461343d565b61304c615804565b613054615960565b61305d83614f96565b9050606061307282600163ffffffff614fad16565b90508060018151811061308157fe5b60200260200101516040519080825280602002602001820160405280156130c257816020015b6130af61586d565b8152602001906001900390816130a75790505b5083528051600090829060019081106130d757fe5b6020026020010181815250506000805b6130f08461503d565b15613184576130fe84615049565b9092509050816001141561316f5761311d61311885615076565b615103565b85600001518460018151811061312f57fe5b60200260200101518151811061314157fe5b60200260200101819052508260018151811061315957fe5b602090810291909101018051600101905261317f565b61317f848263ffffffff61525116565b6130e7565b50505050919050565b613195615817565b61319d615960565b6131a683614f96565b90506000805b6131b58361503d565b156132cf576131c383615049565b909250905081600114156131e9576131e26131dd84615076565b6152ae565b84526132ca565b8160021415613216576132036131fe84615076565b6152c6565b600160a060020a031660208501526132ca565b816003141561323257613228836152d1565b60408501526132ca565b81600414156132565761324c61324784615076565b61532f565b60608501526132ca565b816005141561327a5761327061326b84615076565b614e4b565b60808501526132ca565b81600614156132965761328c836152d1565b60a08501526132ca565b81600714156132ba576132b06132ab84615076565b6153bf565b60c08501526132ca565b6132ca838263ffffffff61525116565b6131ac565b505050919050565b6004820154600090600160a060020a03838116911614806133075750600c830154600160a060020a038381169116145b9392505050565b6000815160021461332157506000613307565b600061332c846153e6565b90506000805b600281101561339d5761336185828151811061334a57fe5b60200260200101518461543790919063ffffffff16565b915086600401816002811061337257fe5b6008020154600160a060020a038381169116146133955760009350505050613307565b600101613332565b5060019695505050505050565b6004820154600090600160a060020a03838116911614156133cd575060006115b5565b600c830154600160a060020a03838116911614156133ed575060016115b5565b6040805160e560020a62461bcd02815260206004820152600d60248201527f4e6f6e6578697374207065657200000000000000000000000000000000000000604482015290519081900360640190fd5b600083815260068501602052604090206002808601548351606092600160a060020a0390921691637cac39cf919060048601908890811061347a57fe5b60080201600301600301546040518363ffffffff1660e060020a0281526004018080602001838152602001828103825284818151815260200191508051906020019060200280838360005b838110156134dd5781810151838201526020016134c5565b50505050905001935050505060006040518083038186803b15801561350157600080fd5b505afa158015613515573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561353e57600080fd5b81019080805164010000000081111561355657600080fd5b8201602081018481111561356957600080fd5b815185602082028301116401000000008211171561358657600080fd5b509094506000935083925050505b825181101561364e576135c38382815181106135ac57fe5b602002602001015183613ddf90919063ffffffff16565b91508360040186600281106135d457fe5b600802015485518051600160a060020a0390921691839081106135f357fe5b6020026020010151887f33252d4bc5cee2ad248475e8c39239a79dc64b2691c9ca1a63ff9af0c75b877686858151811061362957fe5b60200260200101516040518082815260200191505060405180910390a4600101613594565b5061367b8184600401876002811061366257fe5b6008020160030160010154613ddf90919063ffffffff16565b83600401866002811061368a57fe5b600802016004015560208401516136bf5760008360040186600281106136ac57fe5b6008020160030160040181905550610c1a565b6136eb818460040187600281106136d257fe5b600802016003016004015461374290919063ffffffff16565b8360040186600281106136fa57fe5b600802016003016004018190555050505050505050565b60008061372d83613721866153e6565b9063ffffffff61543716565b905061373985826132d7565b95945050505050565b60008282111561375157600080fd5b50900390565b60008181526006830160205260409020600181015461377d90439063ffffffff613ddf16565b815561378b83826002613c36565b817f296143e7e25aa055fbb871702776a67da540876e2be721d5c38ba23c97c90d646137b683614e23565b6040518082600260200280838360005b838110156137de5781810151838201526020016137c6565b5050505090500191505060405180910390a2505050565b6137fd61586d565b613805615960565b61380e83614f96565b9050606061382382600263ffffffff614fad16565b90508060028151811061383257fe5b602002602001015160405190808252806020026020018201604052801561386d57816020015b60608152602001906001900390816138585790505b50836020018190525060008160028151811061388557fe5b6020026020010181815250506000805b61389e8461503d565b15613184576138ac84615049565b909250905081600114156138ca576138c384615076565b855261393e565b816002141561392e576138dc84615076565b8560200151846002815181106138ee57fe5b60200260200101518151811061390057fe5b60200260200101819052508260028151811061391857fe5b602090810291909101018051600101905261393e565b61393e848263ffffffff61525116565b613895565b61394b615887565b613953615960565b61395c83614f96565b90506000805b61396b8361503d565b156132cf5761397983615049565b9092509050816001141561399f5761399861399384615076565b615508565b8452613a03565b81600214156139bb576139b1836152d1565b6020850152613a03565b81600314156139d7576139cd836152d1565b6040850152613a03565b81600414156139f3576139e9836152d1565b6060850152613a03565b613a03838263ffffffff61525116565b613962565b60408051600280825260608083018452600093849391929060208301908038833950508651825192935091839150600090613a3f57fe5b600160a060020a0392909216602092830291909101820152850151815182906001908110613a6957fe5b600160a060020a039283166020918202929092018101919091526040517f0d63a1fd0000000000000000000000000000000000000000000000000000000081523060248201819052604482018890526060600483019081528551606484015285516000958c1694630d63a1fd948894938c93909283926084019187820191028083838d5b83811015613b05578181015183820152602001613aed565b50505050905001945050505050602060405180830381600087803b158015613b2c57600080fd5b505af1158015613b40573d6000803e3d6000fd5b505050506040513d6020811015613b5657600080fd5b5051905080613baf576040805160e560020a62461bcd02815260206004820152601060248201527f6368616e6e656c49642067657473203000000000000000000000000000000000604482015290519081900360640190fd5b6000818152600689016020526040812090600382015460ff166004811115613bd357fe5b14613c28576040805160e560020a62461bcd02815260206004820152601260248201527f4f63637570696564206368616e6e656c49640000000000000000000000000000604482015290519081900360640190fd5b909890975095505050505050565b806004811115613c4257fe5b600383015460ff166004811115613c5557fe5b1415613c60576115a0565b6000600383015460ff166004811115613c7557fe5b14613ce0576003820154613cb690600190859060009060ff166004811115613c9957fe5b81526020019081526020016000205461374290919063ffffffff16565b6003830154849060009060ff166004811115613cce57fe5b81526020810191909152604001600020555b613d116001846000846004811115613cf457fe5b815260200190815260200160002054613ddf90919063ffffffff16565b836000836004811115613d2057fe5b815260208101919091526040016000205560038201805482919060ff19166001836004811115613d4c57fe5b0217905550505050565b613d5e6158b5565b600182516002811115613d6d57fe5b1415613d90576020820151600160a060020a031615613d8b57600080fd5b613ddb565b600282516002811115613d9f57fe5b1415610a02576020820151600160a060020a0316613dbc57600080fd5b613dd28260200151600160a060020a0316615662565b613d8b57600080fd5b5090565b60008282018381101561330757600080fd5b604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301528481166024830152604482018490529151918616916323b872dd916064808201926020929091908290030181600087803b158015613e6557600080fd5b505af1158015613e79573d6000803e3d6000fd5b505050506040513d6020811015613e8f57600080fd5b5051613e9a57600080fd5b50505050565b801580613f3f5750604080517fdd62ed3e000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015613f1157600080fd5b505afa158015613f25573d6000803e3d6000fd5b505050506040513d6020811015613f3b57600080fd5b5051155b613f4857600080fd5b82600160a060020a031663095ea7b383836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015613fab57600080fd5b505af1158015613fbf573d6000803e3d6000fd5b505050506040513d6020811015613fd557600080fd5b50516115a057600080fd5b613fe861586d565b613ff0615960565b613ff983614f96565b9050606061400e82600263ffffffff614fad16565b90508060028151811061401d57fe5b602002602001015160405190808252806020026020018201604052801561405857816020015b60608152602001906001900390816140435790505b50836020018190525060008160028151811061407057fe5b6020026020010181815250506000805b6140898461503d565b156131845761409784615049565b909250905081600114156140b5576140ae84615076565b8552614129565b8160021415614119576140c784615076565b8560200151846002815181106140d957fe5b6020026020010151815181106140eb57fe5b60200260200101819052508260028151811061410357fe5b6020908102919091010180516001019052614129565b614129848263ffffffff61525116565b614080565b6141366158ea565b61413e615960565b61414783614f96565b90506000805b6141568361503d565b156132cf5761416483615049565b909250905081600114156141855761417e6131dd84615076565b8452614210565b81600214156141a157614197836152d1565b6020850152614210565b81600314156141c5576141bb6141b684615076565b615668565b6040850152614210565b81600414156141e1576141d7836152d1565b6060850152614210565b8160051415614200576141f66131dd84615076565b6080850152614210565b614210838263ffffffff61525116565b61414d565b600061422184846133aa565b905061424c8285600401836002811061423657fe5b6008020160020154613ddf90919063ffffffff16565b84600401826002811061425b57fe5b60080201600201819055506000614271856156fc565b1015613e9a57600080fd5b816142865761447c565b60008481526006860160205260409020816143415760038601546002820154604080517f8e0cc17600000000000000000000000000000000000000000000000000000000815260048101899052610100909204600160a060020a0390811660248401528781166044840152606483018790529051921691638e0cc1769160848082019260009290919082900301818387803b15801561432457600080fd5b505af1158015614338573d6000803e3d6000fd5b5050505061295c565b6000828152600687016020526040902060028082015460ff169081111561436457fe5b60028084015460ff169081111561437757fe5b1480156143a257506002818101549083015461010091829004600160a060020a039081169290910416145b6143e05760405160e560020a62461bcd028152600401808060200182810382526023815260200180615a6d6023913960400191505060405180910390fd5b6143ec87848787614ad3565b60038701546002830154604080517f80ba952e000000000000000000000000000000000000000000000000000000008152600481018a905260248101879052610100909204600160a060020a03908116604484015288811660648401526084830188905290519216916380ba952e9160a48082019260009290919082900301818387803b15801561294257600080fd5b5050505050565b61448b61586d565b614493615960565b61449c83614f96565b905060606144b182600263ffffffff614fad16565b9050806002815181106144c057fe5b60200260200101516040519080825280602002602001820160405280156144fb57816020015b60608152602001906001900390816144e65790505b50836020018190525060008160028151811061451357fe5b6020026020010181815250506000805b61452c8461503d565b156131845761453a84615049565b909250905081600114156145585761455184615076565b85526145cc565b81600214156145bc5761456a84615076565b85602001518460028151811061457c57fe5b60200260200101518151811061458e57fe5b6020026020010181905250826002815181106145a657fe5b60209081029190910101805160010190526145cc565b6145cc848263ffffffff61525116565b614523565b6145d961591d565b6145e1615960565b6145ea83614f96565b905060606145ff82600463ffffffff614fad16565b90508060038151811061460e57fe5b602002602001015160405190808252806020026020018201604052801561464f57816020015b61463c6158b5565b8152602001906001900390816146345790505b50836040018190525060008160038151811061466757fe5b6020026020010181815250506000805b6146808461503d565b156131845761468e84615049565b909250905081600114156146af576146a86131dd85615076565b855261475e565b81600214156146cb576146c1846152d1565b602086015261475e565b8160031415614732576146e06141b685615076565b8560400151846003815181106146f257fe5b60200260200101518151811061470457fe5b60200260200101819052508260038151811061471c57fe5b602090810291909101018051600101905261475e565b816004141561474e57614744846152d1565b606086015261475e565b61475e848263ffffffff61525116565b614677565b60005b600281101561295c5781816002811061477b57fe5b60200201516147895761484b565b6003860154600160a060020a0316638e0cc17686868685600281106147aa57fe5b60200201518686600281106147bb57fe5b60200201516040518563ffffffff1660e060020a0281526004018085815260200184600160a060020a0316600160a060020a0316815260200183600160a060020a0316600160a060020a03168152602001828152602001945050505050600060405180830381600087803b15801561483257600080fd5b505af1158015614846573d6000803e3d6000fd5b505050505b600101614766565b600061485d6158cc565b61486561597a565b604080518082019091526004850160026000835b828210156149095760408051608080820183526008850287018054600160a060020a03168352600180820154602080860191909152600283015485870152855160a081018752600384015481526004840154818301526005840154968101969096526006830154606087810191909152600790930154938601939093529083019390935290835292019101614879565b5050505090506149176158cc565b60408051808201909152602080840151606001510151819061494e908560005b602002015160200151613ddf90919063ffffffff16565b815283516060015160209081015191019061496b90856001614937565b9052905060005b6002811015614a375760006149bc84836002811061498c57fe5b6020020151604001518584600281106149a157fe5b60200201516060015160200151613ddf90919063ffffffff16565b9050808383600281106149cb57fe5b602002015110156149fc57600060405180604001604052806000815260200160008152509550955050505050614a40565b614a1d81848460028110614a0c57fe5b60200201519063ffffffff61374216565b838360028110614a2957fe5b602002015250600101614972565b50600193509150505b915091565b60008155614a5582826001613c36565b6000600782018190556008820181905560098201819055600a8201819055600b8201819055600f82018190556010820181905560118201819055601282018190556013820181905560158201805473ffffffffffffffffffffffffffffffffffffffff19169055601682018190556017820181905560189091015550565b600083815260068501602052604090206001600382015460ff166004811115614af857fe5b14614b3b576040805160e560020a62461bcd0281526020600482015260146024820152600080516020615a4d833981519152604482015290519081900360640190fd5b6000614b4d828563ffffffff6133aa16565b600587015490915060ff1615614c7c5760028201546101009004600160a060020a03166000908152600487810160209081526040928390205483517fd6b89e3a0000000000000000000000000000000000000000000000000000000081529283018690529251614c269273__LedgerChannel_________________________9263d6b89e3a92602480840193829003018186803b158015614bed57600080fd5b505af4158015614c01573d6000803e3d6000fd5b505050506040513d6020811015614c1757600080fd5b5051859063ffffffff613ddf16565b1115614c7c576040805160e560020a62461bcd02815260206004820152601560248201527f42616c616e63652065786365656473206c696d69740000000000000000000000604482015290519081900360640190fd5b614c8f8383600401836002811061223857fe5b826004018260028110614c9e57fe5b6008020160010181905550614cb16158cc565b614cb96158cc565b614cc16158cc565b8473__LedgerChannel_________________________63c8ed149e90916040518263ffffffff1660e060020a0281526004018082815260200191505060c06040518083038186803b158015614d1557600080fd5b505af4158015614d29573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060c0811015614d4e57600080fd5b5060408051919450808501935060808501925089917fb63f5dc096f516663ffb5ef2b611f0e2acca8617a868c2a3653cba5e3ed0e92c91869186918691908190859080838360005b83811015614dae578181015183820152602001614d96565b5050505090500183600260200280838360005b83811015614dd9578181015183820152602001614dc1565b5050505090500182600260200280838360005b83811015614e04578181015183820152602001614dec565b50505050905001935050505060405180910390a2505050505050505050565b614e2b6158cc565b506040805180820190915260078201548152600f90910154602082015290565b614e53615948565b614e5b615960565b614e6483614f96565b90506060614e7982600263ffffffff614fad16565b905080600181518110614e8857fe5b6020026020010151604051908082528060200260200182016040528015614eb9578160200160208202803883390190505b508352805160009082906001908110614ece57fe5b6020026020010181815250506000805b614ee78461503d565b1561318457614ef584615049565b90925090508160011415614f6257614f0f6131dd85615076565b856000015184600181518110614f2157fe5b602002602001015181518110614f3357fe5b60200260200101818152505082600181518110614f4c57fe5b6020908102919091010180516001019052614f91565b8160021415614f8157614f776131dd85615076565b6020860152614f91565b614f91848263ffffffff61525116565b614ede565b614f9e615960565b60208101919091526000815290565b815160408051600184018082526020808202830101909252606092918015614fdf578160200160208202803883390190505b5091506000805b614fef8661503d565b1561503457614ffd86615049565b8092508193505050600184838151811061501357fe5b60200260200101818151019150818152505061502f8682615251565b614fe6565b50509092525090565b60208101515190511090565b6000806000615057846152d1565b905060088104925080600716600581111561506e57fe5b915050915091565b60606000615083836152d1565b835160208501515191925082019081111561509d57600080fd5b816040519080825280601f01601f1916602001820160405280156150c8576020820181803883390190505b50602080860151865192955091818601919083010160005b858110156150f85781810151838201526020016150e0565b505050935250919050565b61510b61586d565b615113615960565b61511c83614f96565b9050606061513182600263ffffffff614fad16565b90508060028151811061514057fe5b602002602001015160405190808252806020026020018201604052801561517b57816020015b60608152602001906001900390816151665790505b50836020018190525060008160028151811061519357fe5b6020026020010181815250506000805b6151ac8461503d565b15613184576151ba84615049565b909250905081600114156151d8576151d184615076565b855261524c565b816002141561523c576151ea84615076565b8560200151846002815181106151fc57fe5b60200260200101518151811061520e57fe5b60200260200101819052508260028151811061522657fe5b602090810291909101018051600101905261524c565b61524c848263ffffffff61525116565b6151a3565b600081600581111561525f57fe5b14156152745761526e826152d1565b5061267c565b600281600581111561528257fe5b1415610103576000615293836152d1565b83518101808552602085015151919250111561526e57600080fd5b600081516020146152be57600080fd5b506020015190565b60006115b582615725565b602080820151825181019091015160009182805b600a8110156153295783811a91508060070282607f169060020a0285179450816080166000141561532157855101600101855250610c32915050565b6001016152e5565b50600080fd5b6153376159a8565b61533f615960565b61534883614f96565b90506000805b6153578361503d565b156132cf5761536583615049565b9092509050816001141561538b5761538461537f84615076565b61574d565b84526153ba565b81600214156153aa576153a06141b684615076565b60208501526153ba565b6153ba838263ffffffff61525116565b61534e565b60006020825111156153d057600080fd5b506020818101519151600891030260020a900490565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c909101909152815191012090565b600080600080845160411461545257600093505050506115b5565b50505060208201516040830151606084015160001a601b81101561547457601b015b8060ff16601b1415801561548c57508060ff16601c14155b1561549d57600093505050506115b5565b6040805160008152602080820180845289905260ff8416828401526060820186905260808201859052915160019260a0808401939192601f1981019281900390910190855afa1580156154f4573d6000803e3d6000fd5b5050506020604051035193505050506115b5565b6155106159cd565b615518615960565b61552183614f96565b9050606061553682600263ffffffff614fad16565b90508060028151811061554557fe5b602002602001015160405190808252806020026020018201604052801561558657816020015b6155736158b5565b81526020019060019003908161556b5790505b50836020018190525060008160028151811061559e57fe5b6020026020010181815250506000805b6155b78461503d565b15613184576155c584615049565b909250905081600114156155e6576155df61537f85615076565b855261565d565b816002141561564d576155fb6141b685615076565b85602001518460028151811061560d57fe5b60200260200101518151811061561f57fe5b60200260200101819052508260028151811061563757fe5b602090810291909101018051600101905261565d565b61565d848263ffffffff61525116565b6155ae565b3b151590565b6156706158b5565b615678615960565b61568183614f96565b90506000805b6156908361503d565b156132cf5761569e83615049565b909250905081600114156156c8576156b86131fe84615076565b600160a060020a031684526156f7565b81600214156156e7576156dd6132ab84615076565b60208501526156f7565b6156f7838263ffffffff61525116565b615687565b600e8101546006820154600d83015460009283926133079261224e919082906004890187612238565b6000815160141461573557600080fd5b50602001516c01000000000000000000000000900490565b6157556158b5565b61575d615960565b61576683614f96565b90506000805b6157758361503d565b156132cf5761578383615049565b909250905081600114156157c75761579a836152d1565b60028111156157a557fe5b849060028111156157b257fe5b908160028111156157bf57fe5b9052506157ff565b81600214156157ef576157dc6131fe84615076565b600160a060020a031660208501526157ff565b6157ff838263ffffffff61525116565b61576c565b6040518060200160405280606081525090565b604051806101600160405280600080191681526020016000600160a060020a031681526020016000815260200161584c6159a8565b8152602001615859615948565b815260200160008152602001600081525090565b604051806040016040528060608152602001606081525090565b6040518060c0016040528061589a6159cd565b81526020016000815260200160008152602001600081525090565b604080518082019091526000808252602082015290565b60405180604001604052806002906020820280388339509192915050565b6040805160c081018252600080825260208201529081016159096158b5565b815260006020820181905260409091015290565b6040518060800160405280600080191681526020016000815260200160608152602001600081525090565b60408051808201909152606081526000602082015290565b604051806040016040528060008152602001606081525090565b6040518061020001604052806002905b6159926159ed565b81526020019060019003908161598a5790505090565b60405180608001604052806159bb6158b5565b81526020016159c86158b5565b905290565b60405180606001604052806159e06158b5565b8152602001606081525090565b6040518061010001604052806000600160a060020a0316815260200160008152602001600081526020016159c86040518060a001604052806000815260200160008152602001600080191681526020016000815260200160008152509056fe4368616e6e656c20737461747573206572726f72000000000000000000000000546f6b656e206d69736d61746368206f6620726563697069656e74206368616e6e656c7365714e756d206572726f720000000000000000000000000000000000000000436865636b20636f2d73696773206661696c6564000000000000000000000000a265627a7a723058205549111a4326ef9208daec83bcd12ca5532acab232f60e66c39d0441a96e09b464736f6c634300050a0032"

// DeployLedgerOperation deploys a new Ethereum contract, binding an instance of LedgerOperation to it.
func DeployLedgerOperation(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *LedgerOperation, error) {
	parsed, err := abi.JSON(strings.NewReader(LedgerOperationABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(LedgerOperationBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LedgerOperation{LedgerOperationCaller: LedgerOperationCaller{contract: contract}, LedgerOperationTransactor: LedgerOperationTransactor{contract: contract}, LedgerOperationFilterer: LedgerOperationFilterer{contract: contract}}, nil
}

// LedgerOperation is an auto generated Go binding around an Ethereum contract.
type LedgerOperation struct {
	LedgerOperationCaller     // Read-only binding to the contract
	LedgerOperationTransactor // Write-only binding to the contract
	LedgerOperationFilterer   // Log filterer for contract events
}

// LedgerOperationCaller is an auto generated read-only Go binding around an Ethereum contract.
type LedgerOperationCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LedgerOperationTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LedgerOperationTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LedgerOperationFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LedgerOperationFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LedgerOperationSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LedgerOperationSession struct {
	Contract     *LedgerOperation  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LedgerOperationCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LedgerOperationCallerSession struct {
	Contract *LedgerOperationCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// LedgerOperationTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LedgerOperationTransactorSession struct {
	Contract     *LedgerOperationTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// LedgerOperationRaw is an auto generated low-level Go binding around an Ethereum contract.
type LedgerOperationRaw struct {
	Contract *LedgerOperation // Generic contract binding to access the raw methods on
}

// LedgerOperationCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LedgerOperationCallerRaw struct {
	Contract *LedgerOperationCaller // Generic read-only contract binding to access the raw methods on
}

// LedgerOperationTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LedgerOperationTransactorRaw struct {
	Contract *LedgerOperationTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLedgerOperation creates a new instance of LedgerOperation, bound to a specific deployed contract.
func NewLedgerOperation(address common.Address, backend bind.ContractBackend) (*LedgerOperation, error) {
	contract, err := bindLedgerOperation(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LedgerOperation{LedgerOperationCaller: LedgerOperationCaller{contract: contract}, LedgerOperationTransactor: LedgerOperationTransactor{contract: contract}, LedgerOperationFilterer: LedgerOperationFilterer{contract: contract}}, nil
}

// NewLedgerOperationCaller creates a new read-only instance of LedgerOperation, bound to a specific deployed contract.
func NewLedgerOperationCaller(address common.Address, caller bind.ContractCaller) (*LedgerOperationCaller, error) {
	contract, err := bindLedgerOperation(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LedgerOperationCaller{contract: contract}, nil
}

// NewLedgerOperationTransactor creates a new write-only instance of LedgerOperation, bound to a specific deployed contract.
func NewLedgerOperationTransactor(address common.Address, transactor bind.ContractTransactor) (*LedgerOperationTransactor, error) {
	contract, err := bindLedgerOperation(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LedgerOperationTransactor{contract: contract}, nil
}

// NewLedgerOperationFilterer creates a new log filterer instance of LedgerOperation, bound to a specific deployed contract.
func NewLedgerOperationFilterer(address common.Address, filterer bind.ContractFilterer) (*LedgerOperationFilterer, error) {
	contract, err := bindLedgerOperation(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LedgerOperationFilterer{contract: contract}, nil
}

// bindLedgerOperation binds a generic wrapper to an already deployed contract.
func bindLedgerOperation(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LedgerOperationABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LedgerOperation *LedgerOperationRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _LedgerOperation.Contract.LedgerOperationCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LedgerOperation *LedgerOperationRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LedgerOperation.Contract.LedgerOperationTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LedgerOperation *LedgerOperationRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LedgerOperation.Contract.LedgerOperationTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LedgerOperation *LedgerOperationCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _LedgerOperation.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LedgerOperation *LedgerOperationTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LedgerOperation.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LedgerOperation *LedgerOperationTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LedgerOperation.Contract.contract.Transact(opts, method, params...)
}

// LedgerOperationClearOnePayIterator is returned from FilterClearOnePay and is used to iterate over the raw logs and unpacked data for ClearOnePay events raised by the LedgerOperation contract.
type LedgerOperationClearOnePayIterator struct {
	Event *LedgerOperationClearOnePay // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LedgerOperationClearOnePayIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LedgerOperationClearOnePay)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LedgerOperationClearOnePay)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LedgerOperationClearOnePayIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LedgerOperationClearOnePayIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LedgerOperationClearOnePay represents a ClearOnePay event raised by the LedgerOperation contract.
type LedgerOperationClearOnePay struct {
	ChannelId [32]byte
	PayId     [32]byte
	PeerFrom  common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterClearOnePay is a free log retrieval operation binding the contract event 0x33252d4bc5cee2ad248475e8c39239a79dc64b2691c9ca1a63ff9af0c75b8776.
//
// Solidity: event ClearOnePay(bytes32 indexed channelId, bytes32 indexed payId, address indexed peerFrom, uint256 amount)
func (_LedgerOperation *LedgerOperationFilterer) FilterClearOnePay(opts *bind.FilterOpts, channelId [][32]byte, payId [][32]byte, peerFrom []common.Address) (*LedgerOperationClearOnePayIterator, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}
	var payIdRule []interface{}
	for _, payIdItem := range payId {
		payIdRule = append(payIdRule, payIdItem)
	}
	var peerFromRule []interface{}
	for _, peerFromItem := range peerFrom {
		peerFromRule = append(peerFromRule, peerFromItem)
	}

	logs, sub, err := _LedgerOperation.contract.FilterLogs(opts, "ClearOnePay", channelIdRule, payIdRule, peerFromRule)
	if err != nil {
		return nil, err
	}
	return &LedgerOperationClearOnePayIterator{contract: _LedgerOperation.contract, event: "ClearOnePay", logs: logs, sub: sub}, nil
}

// WatchClearOnePay is a free log subscription operation binding the contract event 0x33252d4bc5cee2ad248475e8c39239a79dc64b2691c9ca1a63ff9af0c75b8776.
//
// Solidity: event ClearOnePay(bytes32 indexed channelId, bytes32 indexed payId, address indexed peerFrom, uint256 amount)
func (_LedgerOperation *LedgerOperationFilterer) WatchClearOnePay(opts *bind.WatchOpts, sink chan<- *LedgerOperationClearOnePay, channelId [][32]byte, payId [][32]byte, peerFrom []common.Address) (event.Subscription, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}
	var payIdRule []interface{}
	for _, payIdItem := range payId {
		payIdRule = append(payIdRule, payIdItem)
	}
	var peerFromRule []interface{}
	for _, peerFromItem := range peerFrom {
		peerFromRule = append(peerFromRule, peerFromItem)
	}

	logs, sub, err := _LedgerOperation.contract.WatchLogs(opts, "ClearOnePay", channelIdRule, payIdRule, peerFromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LedgerOperationClearOnePay)
				if err := _LedgerOperation.contract.UnpackLog(event, "ClearOnePay", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClearOnePay is a log parse operation binding the contract event 0x33252d4bc5cee2ad248475e8c39239a79dc64b2691c9ca1a63ff9af0c75b8776.
//
// Solidity: event ClearOnePay(bytes32 indexed channelId, bytes32 indexed payId, address indexed peerFrom, uint256 amount)
func (_LedgerOperation *LedgerOperationFilterer) ParseClearOnePay(log types.Log) (*LedgerOperationClearOnePay, error) {
	event := new(LedgerOperationClearOnePay)
	if err := _LedgerOperation.contract.UnpackLog(event, "ClearOnePay", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LedgerOperationConfirmSettleIterator is returned from FilterConfirmSettle and is used to iterate over the raw logs and unpacked data for ConfirmSettle events raised by the LedgerOperation contract.
type LedgerOperationConfirmSettleIterator struct {
	Event *LedgerOperationConfirmSettle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LedgerOperationConfirmSettleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LedgerOperationConfirmSettle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LedgerOperationConfirmSettle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LedgerOperationConfirmSettleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LedgerOperationConfirmSettleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LedgerOperationConfirmSettle represents a ConfirmSettle event raised by the LedgerOperation contract.
type LedgerOperationConfirmSettle struct {
	ChannelId     [32]byte
	SettleBalance [2]*big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterConfirmSettle is a free log retrieval operation binding the contract event 0x728ddd8c5acda5947c34db8d759c66ae70884f526ff9b93637d351b012ef3206.
//
// Solidity: event ConfirmSettle(bytes32 indexed channelId, uint256[2] settleBalance)
func (_LedgerOperation *LedgerOperationFilterer) FilterConfirmSettle(opts *bind.FilterOpts, channelId [][32]byte) (*LedgerOperationConfirmSettleIterator, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _LedgerOperation.contract.FilterLogs(opts, "ConfirmSettle", channelIdRule)
	if err != nil {
		return nil, err
	}
	return &LedgerOperationConfirmSettleIterator{contract: _LedgerOperation.contract, event: "ConfirmSettle", logs: logs, sub: sub}, nil
}

// WatchConfirmSettle is a free log subscription operation binding the contract event 0x728ddd8c5acda5947c34db8d759c66ae70884f526ff9b93637d351b012ef3206.
//
// Solidity: event ConfirmSettle(bytes32 indexed channelId, uint256[2] settleBalance)
func (_LedgerOperation *LedgerOperationFilterer) WatchConfirmSettle(opts *bind.WatchOpts, sink chan<- *LedgerOperationConfirmSettle, channelId [][32]byte) (event.Subscription, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _LedgerOperation.contract.WatchLogs(opts, "ConfirmSettle", channelIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LedgerOperationConfirmSettle)
				if err := _LedgerOperation.contract.UnpackLog(event, "ConfirmSettle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConfirmSettle is a log parse operation binding the contract event 0x728ddd8c5acda5947c34db8d759c66ae70884f526ff9b93637d351b012ef3206.
//
// Solidity: event ConfirmSettle(bytes32 indexed channelId, uint256[2] settleBalance)
func (_LedgerOperation *LedgerOperationFilterer) ParseConfirmSettle(log types.Log) (*LedgerOperationConfirmSettle, error) {
	event := new(LedgerOperationConfirmSettle)
	if err := _LedgerOperation.contract.UnpackLog(event, "ConfirmSettle", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LedgerOperationConfirmSettleFailIterator is returned from FilterConfirmSettleFail and is used to iterate over the raw logs and unpacked data for ConfirmSettleFail events raised by the LedgerOperation contract.
type LedgerOperationConfirmSettleFailIterator struct {
	Event *LedgerOperationConfirmSettleFail // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LedgerOperationConfirmSettleFailIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LedgerOperationConfirmSettleFail)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LedgerOperationConfirmSettleFail)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LedgerOperationConfirmSettleFailIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LedgerOperationConfirmSettleFailIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LedgerOperationConfirmSettleFail represents a ConfirmSettleFail event raised by the LedgerOperation contract.
type LedgerOperationConfirmSettleFail struct {
	ChannelId [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterConfirmSettleFail is a free log retrieval operation binding the contract event 0xa6549eb18490d42e7ec93f42115d1ee11b706d04077be9597034dd73ec8bcb36.
//
// Solidity: event ConfirmSettleFail(bytes32 indexed channelId)
func (_LedgerOperation *LedgerOperationFilterer) FilterConfirmSettleFail(opts *bind.FilterOpts, channelId [][32]byte) (*LedgerOperationConfirmSettleFailIterator, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _LedgerOperation.contract.FilterLogs(opts, "ConfirmSettleFail", channelIdRule)
	if err != nil {
		return nil, err
	}
	return &LedgerOperationConfirmSettleFailIterator{contract: _LedgerOperation.contract, event: "ConfirmSettleFail", logs: logs, sub: sub}, nil
}

// WatchConfirmSettleFail is a free log subscription operation binding the contract event 0xa6549eb18490d42e7ec93f42115d1ee11b706d04077be9597034dd73ec8bcb36.
//
// Solidity: event ConfirmSettleFail(bytes32 indexed channelId)
func (_LedgerOperation *LedgerOperationFilterer) WatchConfirmSettleFail(opts *bind.WatchOpts, sink chan<- *LedgerOperationConfirmSettleFail, channelId [][32]byte) (event.Subscription, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _LedgerOperation.contract.WatchLogs(opts, "ConfirmSettleFail", channelIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LedgerOperationConfirmSettleFail)
				if err := _LedgerOperation.contract.UnpackLog(event, "ConfirmSettleFail", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConfirmSettleFail is a log parse operation binding the contract event 0xa6549eb18490d42e7ec93f42115d1ee11b706d04077be9597034dd73ec8bcb36.
//
// Solidity: event ConfirmSettleFail(bytes32 indexed channelId)
func (_LedgerOperation *LedgerOperationFilterer) ParseConfirmSettleFail(log types.Log) (*LedgerOperationConfirmSettleFail, error) {
	event := new(LedgerOperationConfirmSettleFail)
	if err := _LedgerOperation.contract.UnpackLog(event, "ConfirmSettleFail", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LedgerOperationConfirmWithdrawIterator is returned from FilterConfirmWithdraw and is used to iterate over the raw logs and unpacked data for ConfirmWithdraw events raised by the LedgerOperation contract.
type LedgerOperationConfirmWithdrawIterator struct {
	Event *LedgerOperationConfirmWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LedgerOperationConfirmWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LedgerOperationConfirmWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LedgerOperationConfirmWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LedgerOperationConfirmWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LedgerOperationConfirmWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LedgerOperationConfirmWithdraw represents a ConfirmWithdraw event raised by the LedgerOperation contract.
type LedgerOperationConfirmWithdraw struct {
	ChannelId          [32]byte
	WithdrawnAmount    *big.Int
	Receiver           common.Address
	RecipientChannelId [32]byte
	Deposits           [2]*big.Int
	Withdrawals        [2]*big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterConfirmWithdraw is a free log retrieval operation binding the contract event 0xe8110b4ee08638c48f6a4d5f726927df4e541893efa9d2c2c47a6b889041826e.
//
// Solidity: event ConfirmWithdraw(bytes32 indexed channelId, uint256 withdrawnAmount, address indexed receiver, bytes32 indexed recipientChannelId, uint256[2] deposits, uint256[2] withdrawals)
func (_LedgerOperation *LedgerOperationFilterer) FilterConfirmWithdraw(opts *bind.FilterOpts, channelId [][32]byte, receiver []common.Address, recipientChannelId [][32]byte) (*LedgerOperationConfirmWithdrawIterator, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}
	var recipientChannelIdRule []interface{}
	for _, recipientChannelIdItem := range recipientChannelId {
		recipientChannelIdRule = append(recipientChannelIdRule, recipientChannelIdItem)
	}

	logs, sub, err := _LedgerOperation.contract.FilterLogs(opts, "ConfirmWithdraw", channelIdRule, receiverRule, recipientChannelIdRule)
	if err != nil {
		return nil, err
	}
	return &LedgerOperationConfirmWithdrawIterator{contract: _LedgerOperation.contract, event: "ConfirmWithdraw", logs: logs, sub: sub}, nil
}

// WatchConfirmWithdraw is a free log subscription operation binding the contract event 0xe8110b4ee08638c48f6a4d5f726927df4e541893efa9d2c2c47a6b889041826e.
//
// Solidity: event ConfirmWithdraw(bytes32 indexed channelId, uint256 withdrawnAmount, address indexed receiver, bytes32 indexed recipientChannelId, uint256[2] deposits, uint256[2] withdrawals)
func (_LedgerOperation *LedgerOperationFilterer) WatchConfirmWithdraw(opts *bind.WatchOpts, sink chan<- *LedgerOperationConfirmWithdraw, channelId [][32]byte, receiver []common.Address, recipientChannelId [][32]byte) (event.Subscription, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}
	var recipientChannelIdRule []interface{}
	for _, recipientChannelIdItem := range recipientChannelId {
		recipientChannelIdRule = append(recipientChannelIdRule, recipientChannelIdItem)
	}

	logs, sub, err := _LedgerOperation.contract.WatchLogs(opts, "ConfirmWithdraw", channelIdRule, receiverRule, recipientChannelIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LedgerOperationConfirmWithdraw)
				if err := _LedgerOperation.contract.UnpackLog(event, "ConfirmWithdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConfirmWithdraw is a log parse operation binding the contract event 0xe8110b4ee08638c48f6a4d5f726927df4e541893efa9d2c2c47a6b889041826e.
//
// Solidity: event ConfirmWithdraw(bytes32 indexed channelId, uint256 withdrawnAmount, address indexed receiver, bytes32 indexed recipientChannelId, uint256[2] deposits, uint256[2] withdrawals)
func (_LedgerOperation *LedgerOperationFilterer) ParseConfirmWithdraw(log types.Log) (*LedgerOperationConfirmWithdraw, error) {
	event := new(LedgerOperationConfirmWithdraw)
	if err := _LedgerOperation.contract.UnpackLog(event, "ConfirmWithdraw", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LedgerOperationCooperativeSettleIterator is returned from FilterCooperativeSettle and is used to iterate over the raw logs and unpacked data for CooperativeSettle events raised by the LedgerOperation contract.
type LedgerOperationCooperativeSettleIterator struct {
	Event *LedgerOperationCooperativeSettle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LedgerOperationCooperativeSettleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LedgerOperationCooperativeSettle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LedgerOperationCooperativeSettle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LedgerOperationCooperativeSettleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LedgerOperationCooperativeSettleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LedgerOperationCooperativeSettle represents a CooperativeSettle event raised by the LedgerOperation contract.
type LedgerOperationCooperativeSettle struct {
	ChannelId     [32]byte
	SettleBalance [2]*big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCooperativeSettle is a free log retrieval operation binding the contract event 0x6c666557dc97fd52cd2d9d6dd6d109e501ffdb831abeecf13aafeeaf762ee1fd.
//
// Solidity: event CooperativeSettle(bytes32 indexed channelId, uint256[2] settleBalance)
func (_LedgerOperation *LedgerOperationFilterer) FilterCooperativeSettle(opts *bind.FilterOpts, channelId [][32]byte) (*LedgerOperationCooperativeSettleIterator, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _LedgerOperation.contract.FilterLogs(opts, "CooperativeSettle", channelIdRule)
	if err != nil {
		return nil, err
	}
	return &LedgerOperationCooperativeSettleIterator{contract: _LedgerOperation.contract, event: "CooperativeSettle", logs: logs, sub: sub}, nil
}

// WatchCooperativeSettle is a free log subscription operation binding the contract event 0x6c666557dc97fd52cd2d9d6dd6d109e501ffdb831abeecf13aafeeaf762ee1fd.
//
// Solidity: event CooperativeSettle(bytes32 indexed channelId, uint256[2] settleBalance)
func (_LedgerOperation *LedgerOperationFilterer) WatchCooperativeSettle(opts *bind.WatchOpts, sink chan<- *LedgerOperationCooperativeSettle, channelId [][32]byte) (event.Subscription, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _LedgerOperation.contract.WatchLogs(opts, "CooperativeSettle", channelIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LedgerOperationCooperativeSettle)
				if err := _LedgerOperation.contract.UnpackLog(event, "CooperativeSettle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCooperativeSettle is a log parse operation binding the contract event 0x6c666557dc97fd52cd2d9d6dd6d109e501ffdb831abeecf13aafeeaf762ee1fd.
//
// Solidity: event CooperativeSettle(bytes32 indexed channelId, uint256[2] settleBalance)
func (_LedgerOperation *LedgerOperationFilterer) ParseCooperativeSettle(log types.Log) (*LedgerOperationCooperativeSettle, error) {
	event := new(LedgerOperationCooperativeSettle)
	if err := _LedgerOperation.contract.UnpackLog(event, "CooperativeSettle", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LedgerOperationCooperativeWithdrawIterator is returned from FilterCooperativeWithdraw and is used to iterate over the raw logs and unpacked data for CooperativeWithdraw events raised by the LedgerOperation contract.
type LedgerOperationCooperativeWithdrawIterator struct {
	Event *LedgerOperationCooperativeWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LedgerOperationCooperativeWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LedgerOperationCooperativeWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LedgerOperationCooperativeWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LedgerOperationCooperativeWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LedgerOperationCooperativeWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LedgerOperationCooperativeWithdraw represents a CooperativeWithdraw event raised by the LedgerOperation contract.
type LedgerOperationCooperativeWithdraw struct {
	ChannelId          [32]byte
	WithdrawnAmount    *big.Int
	Receiver           common.Address
	RecipientChannelId [32]byte
	Deposits           [2]*big.Int
	Withdrawals        [2]*big.Int
	SeqNum             *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterCooperativeWithdraw is a free log retrieval operation binding the contract event 0x1b87d077d9b706e42883b454b67730633fd6b4b29f9a9cf5f57c278c54f51c8f.
//
// Solidity: event CooperativeWithdraw(bytes32 indexed channelId, uint256 withdrawnAmount, address indexed receiver, bytes32 indexed recipientChannelId, uint256[2] deposits, uint256[2] withdrawals, uint256 seqNum)
func (_LedgerOperation *LedgerOperationFilterer) FilterCooperativeWithdraw(opts *bind.FilterOpts, channelId [][32]byte, receiver []common.Address, recipientChannelId [][32]byte) (*LedgerOperationCooperativeWithdrawIterator, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}
	var recipientChannelIdRule []interface{}
	for _, recipientChannelIdItem := range recipientChannelId {
		recipientChannelIdRule = append(recipientChannelIdRule, recipientChannelIdItem)
	}

	logs, sub, err := _LedgerOperation.contract.FilterLogs(opts, "CooperativeWithdraw", channelIdRule, receiverRule, recipientChannelIdRule)
	if err != nil {
		return nil, err
	}
	return &LedgerOperationCooperativeWithdrawIterator{contract: _LedgerOperation.contract, event: "CooperativeWithdraw", logs: logs, sub: sub}, nil
}

// WatchCooperativeWithdraw is a free log subscription operation binding the contract event 0x1b87d077d9b706e42883b454b67730633fd6b4b29f9a9cf5f57c278c54f51c8f.
//
// Solidity: event CooperativeWithdraw(bytes32 indexed channelId, uint256 withdrawnAmount, address indexed receiver, bytes32 indexed recipientChannelId, uint256[2] deposits, uint256[2] withdrawals, uint256 seqNum)
func (_LedgerOperation *LedgerOperationFilterer) WatchCooperativeWithdraw(opts *bind.WatchOpts, sink chan<- *LedgerOperationCooperativeWithdraw, channelId [][32]byte, receiver []common.Address, recipientChannelId [][32]byte) (event.Subscription, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}
	var recipientChannelIdRule []interface{}
	for _, recipientChannelIdItem := range recipientChannelId {
		recipientChannelIdRule = append(recipientChannelIdRule, recipientChannelIdItem)
	}

	logs, sub, err := _LedgerOperation.contract.WatchLogs(opts, "CooperativeWithdraw", channelIdRule, receiverRule, recipientChannelIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LedgerOperationCooperativeWithdraw)
				if err := _LedgerOperation.contract.UnpackLog(event, "CooperativeWithdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCooperativeWithdraw is a log parse operation binding the contract event 0x1b87d077d9b706e42883b454b67730633fd6b4b29f9a9cf5f57c278c54f51c8f.
//
// Solidity: event CooperativeWithdraw(bytes32 indexed channelId, uint256 withdrawnAmount, address indexed receiver, bytes32 indexed recipientChannelId, uint256[2] deposits, uint256[2] withdrawals, uint256 seqNum)
func (_LedgerOperation *LedgerOperationFilterer) ParseCooperativeWithdraw(log types.Log) (*LedgerOperationCooperativeWithdraw, error) {
	event := new(LedgerOperationCooperativeWithdraw)
	if err := _LedgerOperation.contract.UnpackLog(event, "CooperativeWithdraw", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LedgerOperationDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the LedgerOperation contract.
type LedgerOperationDepositIterator struct {
	Event *LedgerOperationDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LedgerOperationDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LedgerOperationDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LedgerOperationDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LedgerOperationDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LedgerOperationDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LedgerOperationDeposit represents a Deposit event raised by the LedgerOperation contract.
type LedgerOperationDeposit struct {
	ChannelId   [32]byte
	PeerAddrs   [2]common.Address
	Deposits    [2]*big.Int
	Withdrawals [2]*big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0xb63f5dc096f516663ffb5ef2b611f0e2acca8617a868c2a3653cba5e3ed0e92c.
//
// Solidity: event Deposit(bytes32 indexed channelId, address[2] peerAddrs, uint256[2] deposits, uint256[2] withdrawals)
func (_LedgerOperation *LedgerOperationFilterer) FilterDeposit(opts *bind.FilterOpts, channelId [][32]byte) (*LedgerOperationDepositIterator, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _LedgerOperation.contract.FilterLogs(opts, "Deposit", channelIdRule)
	if err != nil {
		return nil, err
	}
	return &LedgerOperationDepositIterator{contract: _LedgerOperation.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0xb63f5dc096f516663ffb5ef2b611f0e2acca8617a868c2a3653cba5e3ed0e92c.
//
// Solidity: event Deposit(bytes32 indexed channelId, address[2] peerAddrs, uint256[2] deposits, uint256[2] withdrawals)
func (_LedgerOperation *LedgerOperationFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *LedgerOperationDeposit, channelId [][32]byte) (event.Subscription, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _LedgerOperation.contract.WatchLogs(opts, "Deposit", channelIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LedgerOperationDeposit)
				if err := _LedgerOperation.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0xb63f5dc096f516663ffb5ef2b611f0e2acca8617a868c2a3653cba5e3ed0e92c.
//
// Solidity: event Deposit(bytes32 indexed channelId, address[2] peerAddrs, uint256[2] deposits, uint256[2] withdrawals)
func (_LedgerOperation *LedgerOperationFilterer) ParseDeposit(log types.Log) (*LedgerOperationDeposit, error) {
	event := new(LedgerOperationDeposit)
	if err := _LedgerOperation.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LedgerOperationIntendSettleIterator is returned from FilterIntendSettle and is used to iterate over the raw logs and unpacked data for IntendSettle events raised by the LedgerOperation contract.
type LedgerOperationIntendSettleIterator struct {
	Event *LedgerOperationIntendSettle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LedgerOperationIntendSettleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LedgerOperationIntendSettle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LedgerOperationIntendSettle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LedgerOperationIntendSettleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LedgerOperationIntendSettleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LedgerOperationIntendSettle represents a IntendSettle event raised by the LedgerOperation contract.
type LedgerOperationIntendSettle struct {
	ChannelId [32]byte
	SeqNums   [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterIntendSettle is a free log retrieval operation binding the contract event 0x296143e7e25aa055fbb871702776a67da540876e2be721d5c38ba23c97c90d64.
//
// Solidity: event IntendSettle(bytes32 indexed channelId, uint256[2] seqNums)
func (_LedgerOperation *LedgerOperationFilterer) FilterIntendSettle(opts *bind.FilterOpts, channelId [][32]byte) (*LedgerOperationIntendSettleIterator, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _LedgerOperation.contract.FilterLogs(opts, "IntendSettle", channelIdRule)
	if err != nil {
		return nil, err
	}
	return &LedgerOperationIntendSettleIterator{contract: _LedgerOperation.contract, event: "IntendSettle", logs: logs, sub: sub}, nil
}

// WatchIntendSettle is a free log subscription operation binding the contract event 0x296143e7e25aa055fbb871702776a67da540876e2be721d5c38ba23c97c90d64.
//
// Solidity: event IntendSettle(bytes32 indexed channelId, uint256[2] seqNums)
func (_LedgerOperation *LedgerOperationFilterer) WatchIntendSettle(opts *bind.WatchOpts, sink chan<- *LedgerOperationIntendSettle, channelId [][32]byte) (event.Subscription, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _LedgerOperation.contract.WatchLogs(opts, "IntendSettle", channelIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LedgerOperationIntendSettle)
				if err := _LedgerOperation.contract.UnpackLog(event, "IntendSettle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseIntendSettle is a log parse operation binding the contract event 0x296143e7e25aa055fbb871702776a67da540876e2be721d5c38ba23c97c90d64.
//
// Solidity: event IntendSettle(bytes32 indexed channelId, uint256[2] seqNums)
func (_LedgerOperation *LedgerOperationFilterer) ParseIntendSettle(log types.Log) (*LedgerOperationIntendSettle, error) {
	event := new(LedgerOperationIntendSettle)
	if err := _LedgerOperation.contract.UnpackLog(event, "IntendSettle", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LedgerOperationIntendWithdrawIterator is returned from FilterIntendWithdraw and is used to iterate over the raw logs and unpacked data for IntendWithdraw events raised by the LedgerOperation contract.
type LedgerOperationIntendWithdrawIterator struct {
	Event *LedgerOperationIntendWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LedgerOperationIntendWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LedgerOperationIntendWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LedgerOperationIntendWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LedgerOperationIntendWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LedgerOperationIntendWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LedgerOperationIntendWithdraw represents a IntendWithdraw event raised by the LedgerOperation contract.
type LedgerOperationIntendWithdraw struct {
	ChannelId [32]byte
	Receiver  common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterIntendWithdraw is a free log retrieval operation binding the contract event 0x97883669625c4ff7f5432b4ca33fe75fb5fee985deb196a967e5758f846170fe.
//
// Solidity: event IntendWithdraw(bytes32 indexed channelId, address indexed receiver, uint256 amount)
func (_LedgerOperation *LedgerOperationFilterer) FilterIntendWithdraw(opts *bind.FilterOpts, channelId [][32]byte, receiver []common.Address) (*LedgerOperationIntendWithdrawIterator, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}
	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}

	logs, sub, err := _LedgerOperation.contract.FilterLogs(opts, "IntendWithdraw", channelIdRule, receiverRule)
	if err != nil {
		return nil, err
	}
	return &LedgerOperationIntendWithdrawIterator{contract: _LedgerOperation.contract, event: "IntendWithdraw", logs: logs, sub: sub}, nil
}

// WatchIntendWithdraw is a free log subscription operation binding the contract event 0x97883669625c4ff7f5432b4ca33fe75fb5fee985deb196a967e5758f846170fe.
//
// Solidity: event IntendWithdraw(bytes32 indexed channelId, address indexed receiver, uint256 amount)
func (_LedgerOperation *LedgerOperationFilterer) WatchIntendWithdraw(opts *bind.WatchOpts, sink chan<- *LedgerOperationIntendWithdraw, channelId [][32]byte, receiver []common.Address) (event.Subscription, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}
	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}

	logs, sub, err := _LedgerOperation.contract.WatchLogs(opts, "IntendWithdraw", channelIdRule, receiverRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LedgerOperationIntendWithdraw)
				if err := _LedgerOperation.contract.UnpackLog(event, "IntendWithdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseIntendWithdraw is a log parse operation binding the contract event 0x97883669625c4ff7f5432b4ca33fe75fb5fee985deb196a967e5758f846170fe.
//
// Solidity: event IntendWithdraw(bytes32 indexed channelId, address indexed receiver, uint256 amount)
func (_LedgerOperation *LedgerOperationFilterer) ParseIntendWithdraw(log types.Log) (*LedgerOperationIntendWithdraw, error) {
	event := new(LedgerOperationIntendWithdraw)
	if err := _LedgerOperation.contract.UnpackLog(event, "IntendWithdraw", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LedgerOperationOpenChannelIterator is returned from FilterOpenChannel and is used to iterate over the raw logs and unpacked data for OpenChannel events raised by the LedgerOperation contract.
type LedgerOperationOpenChannelIterator struct {
	Event *LedgerOperationOpenChannel // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LedgerOperationOpenChannelIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LedgerOperationOpenChannel)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LedgerOperationOpenChannel)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LedgerOperationOpenChannelIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LedgerOperationOpenChannelIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LedgerOperationOpenChannel represents a OpenChannel event raised by the LedgerOperation contract.
type LedgerOperationOpenChannel struct {
	ChannelId       [32]byte
	TokenType       *big.Int
	TokenAddress    common.Address
	PeerAddrs       [2]common.Address
	InitialDeposits [2]*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterOpenChannel is a free log retrieval operation binding the contract event 0x9d9f66221370175606b4085f28a419b201c9b6dafd9e0c4520e5bf69ea3e166d.
//
// Solidity: event OpenChannel(bytes32 indexed channelId, uint256 tokenType, address indexed tokenAddress, address[2] peerAddrs, uint256[2] initialDeposits)
func (_LedgerOperation *LedgerOperationFilterer) FilterOpenChannel(opts *bind.FilterOpts, channelId [][32]byte, tokenAddress []common.Address) (*LedgerOperationOpenChannelIterator, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	var tokenAddressRule []interface{}
	for _, tokenAddressItem := range tokenAddress {
		tokenAddressRule = append(tokenAddressRule, tokenAddressItem)
	}

	logs, sub, err := _LedgerOperation.contract.FilterLogs(opts, "OpenChannel", channelIdRule, tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return &LedgerOperationOpenChannelIterator{contract: _LedgerOperation.contract, event: "OpenChannel", logs: logs, sub: sub}, nil
}

// WatchOpenChannel is a free log subscription operation binding the contract event 0x9d9f66221370175606b4085f28a419b201c9b6dafd9e0c4520e5bf69ea3e166d.
//
// Solidity: event OpenChannel(bytes32 indexed channelId, uint256 tokenType, address indexed tokenAddress, address[2] peerAddrs, uint256[2] initialDeposits)
func (_LedgerOperation *LedgerOperationFilterer) WatchOpenChannel(opts *bind.WatchOpts, sink chan<- *LedgerOperationOpenChannel, channelId [][32]byte, tokenAddress []common.Address) (event.Subscription, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	var tokenAddressRule []interface{}
	for _, tokenAddressItem := range tokenAddress {
		tokenAddressRule = append(tokenAddressRule, tokenAddressItem)
	}

	logs, sub, err := _LedgerOperation.contract.WatchLogs(opts, "OpenChannel", channelIdRule, tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LedgerOperationOpenChannel)
				if err := _LedgerOperation.contract.UnpackLog(event, "OpenChannel", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOpenChannel is a log parse operation binding the contract event 0x9d9f66221370175606b4085f28a419b201c9b6dafd9e0c4520e5bf69ea3e166d.
//
// Solidity: event OpenChannel(bytes32 indexed channelId, uint256 tokenType, address indexed tokenAddress, address[2] peerAddrs, uint256[2] initialDeposits)
func (_LedgerOperation *LedgerOperationFilterer) ParseOpenChannel(log types.Log) (*LedgerOperationOpenChannel, error) {
	event := new(LedgerOperationOpenChannel)
	if err := _LedgerOperation.contract.UnpackLog(event, "OpenChannel", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LedgerOperationSnapshotStatesIterator is returned from FilterSnapshotStates and is used to iterate over the raw logs and unpacked data for SnapshotStates events raised by the LedgerOperation contract.
type LedgerOperationSnapshotStatesIterator struct {
	Event *LedgerOperationSnapshotStates // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LedgerOperationSnapshotStatesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LedgerOperationSnapshotStates)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LedgerOperationSnapshotStates)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LedgerOperationSnapshotStatesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LedgerOperationSnapshotStatesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LedgerOperationSnapshotStates represents a SnapshotStates event raised by the LedgerOperation contract.
type LedgerOperationSnapshotStates struct {
	ChannelId [32]byte
	SeqNums   [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSnapshotStates is a free log retrieval operation binding the contract event 0xd0793cc4198bf052a6d91a9a1273c4af39f02a91b0e19029477511c278c5b271.
//
// Solidity: event SnapshotStates(bytes32 indexed channelId, uint256[2] seqNums)
func (_LedgerOperation *LedgerOperationFilterer) FilterSnapshotStates(opts *bind.FilterOpts, channelId [][32]byte) (*LedgerOperationSnapshotStatesIterator, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _LedgerOperation.contract.FilterLogs(opts, "SnapshotStates", channelIdRule)
	if err != nil {
		return nil, err
	}
	return &LedgerOperationSnapshotStatesIterator{contract: _LedgerOperation.contract, event: "SnapshotStates", logs: logs, sub: sub}, nil
}

// WatchSnapshotStates is a free log subscription operation binding the contract event 0xd0793cc4198bf052a6d91a9a1273c4af39f02a91b0e19029477511c278c5b271.
//
// Solidity: event SnapshotStates(bytes32 indexed channelId, uint256[2] seqNums)
func (_LedgerOperation *LedgerOperationFilterer) WatchSnapshotStates(opts *bind.WatchOpts, sink chan<- *LedgerOperationSnapshotStates, channelId [][32]byte) (event.Subscription, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _LedgerOperation.contract.WatchLogs(opts, "SnapshotStates", channelIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LedgerOperationSnapshotStates)
				if err := _LedgerOperation.contract.UnpackLog(event, "SnapshotStates", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSnapshotStates is a log parse operation binding the contract event 0xd0793cc4198bf052a6d91a9a1273c4af39f02a91b0e19029477511c278c5b271.
//
// Solidity: event SnapshotStates(bytes32 indexed channelId, uint256[2] seqNums)
func (_LedgerOperation *LedgerOperationFilterer) ParseSnapshotStates(log types.Log) (*LedgerOperationSnapshotStates, error) {
	event := new(LedgerOperationSnapshotStates)
	if err := _LedgerOperation.contract.UnpackLog(event, "SnapshotStates", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LedgerOperationVetoWithdrawIterator is returned from FilterVetoWithdraw and is used to iterate over the raw logs and unpacked data for VetoWithdraw events raised by the LedgerOperation contract.
type LedgerOperationVetoWithdrawIterator struct {
	Event *LedgerOperationVetoWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LedgerOperationVetoWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LedgerOperationVetoWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LedgerOperationVetoWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LedgerOperationVetoWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LedgerOperationVetoWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LedgerOperationVetoWithdraw represents a VetoWithdraw event raised by the LedgerOperation contract.
type LedgerOperationVetoWithdraw struct {
	ChannelId [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterVetoWithdraw is a free log retrieval operation binding the contract event 0x9a8a5493b616f074b3f754b5fd66049c8e7980f01547289e5e31808485c6002c.
//
// Solidity: event VetoWithdraw(bytes32 indexed channelId)
func (_LedgerOperation *LedgerOperationFilterer) FilterVetoWithdraw(opts *bind.FilterOpts, channelId [][32]byte) (*LedgerOperationVetoWithdrawIterator, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _LedgerOperation.contract.FilterLogs(opts, "VetoWithdraw", channelIdRule)
	if err != nil {
		return nil, err
	}
	return &LedgerOperationVetoWithdrawIterator{contract: _LedgerOperation.contract, event: "VetoWithdraw", logs: logs, sub: sub}, nil
}

// WatchVetoWithdraw is a free log subscription operation binding the contract event 0x9a8a5493b616f074b3f754b5fd66049c8e7980f01547289e5e31808485c6002c.
//
// Solidity: event VetoWithdraw(bytes32 indexed channelId)
func (_LedgerOperation *LedgerOperationFilterer) WatchVetoWithdraw(opts *bind.WatchOpts, sink chan<- *LedgerOperationVetoWithdraw, channelId [][32]byte) (event.Subscription, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _LedgerOperation.contract.WatchLogs(opts, "VetoWithdraw", channelIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LedgerOperationVetoWithdraw)
				if err := _LedgerOperation.contract.UnpackLog(event, "VetoWithdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVetoWithdraw is a log parse operation binding the contract event 0x9a8a5493b616f074b3f754b5fd66049c8e7980f01547289e5e31808485c6002c.
//
// Solidity: event VetoWithdraw(bytes32 indexed channelId)
func (_LedgerOperation *LedgerOperationFilterer) ParseVetoWithdraw(log types.Log) (*LedgerOperationVetoWithdraw, error) {
	event := new(LedgerOperationVetoWithdraw)
	if err := _LedgerOperation.contract.UnpackLog(event, "VetoWithdraw", log); err != nil {
		return nil, err
	}
	return event, nil
}
