// Code generated by protoc-gen-go. DO NOT EDIT.
// source: seal.proto

package seal

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TransactorLog struct {
	TxHash               string            `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	MsgNum               uint32            `protobuf:"varint,2,opt,name=msg_num,json=msgNum,proto3" json:"msg_num,omitempty"`
	MsgType              map[string]uint32 `protobuf:"bytes,3,rep,name=msg_type,json=msgType,proto3" json:"msg_type,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Sender               string            `protobuf:"bytes,4,opt,name=sender,proto3" json:"sender,omitempty"`
	ExecutionTimeMs      float64           `protobuf:"fixed64,100,opt,name=execution_time_ms,json=executionTimeMs,proto3" json:"execution_time_ms,omitempty"`
	Error                []string          `protobuf:"bytes,101,rep,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TransactorLog) Reset()         { *m = TransactorLog{} }
func (m *TransactorLog) String() string { return proto.CompactTextString(m) }
func (*TransactorLog) ProtoMessage()    {}
func (*TransactorLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_a02c8d155741ea4f, []int{0}
}

func (m *TransactorLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactorLog.Unmarshal(m, b)
}
func (m *TransactorLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactorLog.Marshal(b, m, deterministic)
}
func (m *TransactorLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactorLog.Merge(m, src)
}
func (m *TransactorLog) XXX_Size() int {
	return xxx_messageInfo_TransactorLog.Size(m)
}
func (m *TransactorLog) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactorLog.DiscardUnknown(m)
}

var xxx_messageInfo_TransactorLog proto.InternalMessageInfo

func (m *TransactorLog) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *TransactorLog) GetMsgNum() uint32 {
	if m != nil {
		return m.MsgNum
	}
	return 0
}

func (m *TransactorLog) GetMsgType() map[string]uint32 {
	if m != nil {
		return m.MsgType
	}
	return nil
}

func (m *TransactorLog) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *TransactorLog) GetExecutionTimeMs() float64 {
	if m != nil {
		return m.ExecutionTimeMs
	}
	return 0
}

func (m *TransactorLog) GetError() []string {
	if m != nil {
		return m.Error
	}
	return nil
}

type MsgLog struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	EthAddress           string   `protobuf:"bytes,2,opt,name=eth_address,json=ethAddress,proto3" json:"eth_address,omitempty"`
	ChanId               string   `protobuf:"bytes,3,opt,name=chan_id,json=chanId,proto3" json:"chan_id,omitempty"`
	ChanSeqNum           uint64   `protobuf:"varint,4,opt,name=chan_seq_num,json=chanSeqNum,proto3" json:"chan_seq_num,omitempty"`
	TriggerTxHash        string   `protobuf:"bytes,5,opt,name=trigger_tx_hash,json=triggerTxHash,proto3" json:"trigger_tx_hash,omitempty"`
	GuardTxHash          string   `protobuf:"bytes,6,opt,name=guard_tx_hash,json=guardTxHash,proto3" json:"guard_tx_hash,omitempty"`
	PubKey               string   `protobuf:"bytes,7,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Transactor           []string `protobuf:"bytes,8,rep,name=transactor,proto3" json:"transactor,omitempty"`
	CandidateAddr        string   `protobuf:"bytes,9,opt,name=candidate_addr,json=candidateAddr,proto3" json:"candidate_addr,omitempty"`
	DelegatorAddr        string   `protobuf:"bytes,10,opt,name=delegator_addr,json=delegatorAddr,proto3" json:"delegator_addr,omitempty"`
	SlashNonce           uint64   `protobuf:"varint,11,opt,name=slash_nonce,json=slashNonce,proto3" json:"slash_nonce,omitempty"`
	BlockNum             uint64   `protobuf:"varint,12,opt,name=block_num,json=blockNum,proto3" json:"block_num,omitempty"`
	ChanPeerFrom         string   `protobuf:"bytes,13,opt,name=chan_peer_from,json=chanPeerFrom,proto3" json:"chan_peer_from,omitempty"`
	Sender               string   `protobuf:"bytes,99,opt,name=sender,proto3" json:"sender,omitempty"`
	ExecutionTimeMs      float64  `protobuf:"fixed64,100,opt,name=execution_time_ms,json=executionTimeMs,proto3" json:"execution_time_ms,omitempty"`
	Error                []string `protobuf:"bytes,101,rep,name=error,proto3" json:"error,omitempty"`
	Warn                 []string `protobuf:"bytes,102,rep,name=warn,proto3" json:"warn,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgLog) Reset()         { *m = MsgLog{} }
func (m *MsgLog) String() string { return proto.CompactTextString(m) }
func (*MsgLog) ProtoMessage()    {}
func (*MsgLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_a02c8d155741ea4f, []int{1}
}

func (m *MsgLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgLog.Unmarshal(m, b)
}
func (m *MsgLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgLog.Marshal(b, m, deterministic)
}
func (m *MsgLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLog.Merge(m, src)
}
func (m *MsgLog) XXX_Size() int {
	return xxx_messageInfo_MsgLog.Size(m)
}
func (m *MsgLog) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLog.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLog proto.InternalMessageInfo

func (m *MsgLog) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *MsgLog) GetEthAddress() string {
	if m != nil {
		return m.EthAddress
	}
	return ""
}

func (m *MsgLog) GetChanId() string {
	if m != nil {
		return m.ChanId
	}
	return ""
}

func (m *MsgLog) GetChanSeqNum() uint64 {
	if m != nil {
		return m.ChanSeqNum
	}
	return 0
}

func (m *MsgLog) GetTriggerTxHash() string {
	if m != nil {
		return m.TriggerTxHash
	}
	return ""
}

func (m *MsgLog) GetGuardTxHash() string {
	if m != nil {
		return m.GuardTxHash
	}
	return ""
}

func (m *MsgLog) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

func (m *MsgLog) GetTransactor() []string {
	if m != nil {
		return m.Transactor
	}
	return nil
}

func (m *MsgLog) GetCandidateAddr() string {
	if m != nil {
		return m.CandidateAddr
	}
	return ""
}

func (m *MsgLog) GetDelegatorAddr() string {
	if m != nil {
		return m.DelegatorAddr
	}
	return ""
}

func (m *MsgLog) GetSlashNonce() uint64 {
	if m != nil {
		return m.SlashNonce
	}
	return 0
}

func (m *MsgLog) GetBlockNum() uint64 {
	if m != nil {
		return m.BlockNum
	}
	return 0
}

func (m *MsgLog) GetChanPeerFrom() string {
	if m != nil {
		return m.ChanPeerFrom
	}
	return ""
}

func (m *MsgLog) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgLog) GetExecutionTimeMs() float64 {
	if m != nil {
		return m.ExecutionTimeMs
	}
	return 0
}

func (m *MsgLog) GetError() []string {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *MsgLog) GetWarn() []string {
	if m != nil {
		return m.Warn
	}
	return nil
}

func init() {
	proto.RegisterType((*TransactorLog)(nil), "seal.TransactorLog")
	proto.RegisterMapType((map[string]uint32)(nil), "seal.TransactorLog.MsgTypeEntry")
	proto.RegisterType((*MsgLog)(nil), "seal.MsgLog")
}

func init() { proto.RegisterFile("seal.proto", fileDescriptor_a02c8d155741ea4f) }

var fileDescriptor_a02c8d155741ea4f = []byte{
	// 484 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0x41, 0x8f, 0xd3, 0x3c,
	0x10, 0x55, 0xda, 0x6e, 0xb6, 0x9d, 0xb6, 0xbb, 0xdf, 0x67, 0x21, 0xb0, 0x40, 0x62, 0xa3, 0x0a,
	0x50, 0xc5, 0xa1, 0x07, 0xb8, 0xa0, 0xe5, 0xc4, 0x01, 0x04, 0x82, 0xae, 0x50, 0xe8, 0xdd, 0x72,
	0xe3, 0xd9, 0x24, 0xda, 0xc6, 0xce, 0xda, 0x0e, 0xb4, 0xff, 0x83, 0x2b, 0xff, 0x15, 0x79, 0x5c,
	0xa2, 0x72, 0xe7, 0x36, 0xf3, 0xe6, 0x79, 0x26, 0xef, 0xcd, 0x04, 0xc0, 0xa1, 0xdc, 0xad, 0x5a,
	0x6b, 0xbc, 0x61, 0xa3, 0x10, 0x2f, 0x7e, 0x0e, 0x60, 0xbe, 0xb1, 0x52, 0x3b, 0x59, 0x78, 0x63,
	0xbf, 0x98, 0x92, 0x3d, 0x82, 0x73, 0xbf, 0x17, 0x95, 0x74, 0x15, 0x4f, 0xb2, 0x64, 0x39, 0xc9,
	0x53, 0xbf, 0xff, 0x28, 0x5d, 0x15, 0x0a, 0x8d, 0x2b, 0x85, 0xee, 0x1a, 0x3e, 0xc8, 0x92, 0xe5,
	0x3c, 0x4f, 0x1b, 0x57, 0xde, 0x74, 0x0d, 0x7b, 0x0b, 0xe3, 0x50, 0xf0, 0x87, 0x16, 0xf9, 0x30,
	0x1b, 0x2e, 0xa7, 0xaf, 0xb2, 0x15, 0x0d, 0xfa, 0xab, 0xf1, 0x6a, 0xed, 0xca, 0xcd, 0xa1, 0xc5,
	0xf7, 0xda, 0xdb, 0x43, 0x1e, 0x5a, 0x85, 0x8c, 0x3d, 0x84, 0xd4, 0xa1, 0x56, 0x68, 0xf9, 0x28,
	0x4e, 0x8b, 0x19, 0x7b, 0x09, 0xff, 0xe3, 0x1e, 0x8b, 0xce, 0xd7, 0x46, 0x0b, 0x5f, 0x37, 0x28,
	0x1a, 0xc7, 0x55, 0x96, 0x2c, 0x93, 0xfc, 0xb2, 0x2f, 0x6c, 0xea, 0x06, 0xd7, 0x8e, 0x3d, 0x80,
	0x33, 0xb4, 0xd6, 0x58, 0x8e, 0xd9, 0x70, 0x39, 0xc9, 0x63, 0xf2, 0xf8, 0x1a, 0x66, 0xa7, 0x23,
	0xd9, 0x7f, 0x30, 0xbc, 0xc3, 0xc3, 0x51, 0x54, 0x08, 0xc3, 0xbb, 0xef, 0x72, 0xd7, 0xe1, 0x51,
	0x4f, 0x4c, 0xae, 0x07, 0x6f, 0x92, 0xc5, 0xaf, 0x11, 0xa4, 0x6b, 0x57, 0x06, 0x3f, 0x18, 0x8c,
	0x48, 0x59, 0x7c, 0x47, 0x31, 0xbb, 0x82, 0x29, 0xfa, 0x4a, 0x48, 0xa5, 0x2c, 0x3a, 0x47, 0xcf,
	0x27, 0x39, 0xa0, 0xaf, 0xde, 0x45, 0x24, 0x78, 0x55, 0x54, 0x52, 0x8b, 0x5a, 0xf1, 0x61, 0x94,
	0x15, 0xd2, 0x4f, 0x8a, 0x65, 0x30, 0xa3, 0x82, 0xc3, 0x7b, 0x72, 0x32, 0x88, 0x1e, 0xe5, 0x10,
	0xb0, 0x6f, 0x78, 0x1f, 0xdc, 0x7c, 0x01, 0x97, 0xde, 0xd6, 0x65, 0x89, 0x56, 0xfc, 0xd9, 0xc3,
	0x19, 0xb5, 0x98, 0x1f, 0xe1, 0x4d, 0x5c, 0xc7, 0x02, 0xe6, 0x65, 0x27, 0xad, 0xea, 0x59, 0x29,
	0xb1, 0xa6, 0x04, 0x6e, 0xfa, 0x95, 0xb5, 0xdd, 0x56, 0x04, 0xd9, 0xe7, 0xf1, 0x33, 0xda, 0x6e,
	0xfb, 0x19, 0x0f, 0xec, 0x29, 0x80, 0xef, 0x97, 0xc3, 0xc7, 0x64, 0xdb, 0x09, 0xc2, 0x9e, 0xc3,
	0x45, 0x21, 0xb5, 0xaa, 0x95, 0xf4, 0x48, 0x32, 0xf9, 0x24, 0x7e, 0x43, 0x8f, 0x06, 0xa5, 0x81,
	0xa6, 0x70, 0x87, 0xa5, 0xf4, 0xc6, 0x46, 0x1a, 0x44, 0x5a, 0x8f, 0x12, 0xed, 0x0a, 0xa6, 0x6e,
	0x27, 0x5d, 0x25, 0xb4, 0xd1, 0x05, 0xf2, 0x69, 0xd4, 0x4c, 0xd0, 0x4d, 0x40, 0xd8, 0x13, 0x98,
	0x6c, 0x77, 0xa6, 0xb8, 0x23, 0x4b, 0x66, 0x54, 0x1e, 0x13, 0x10, 0x0c, 0x79, 0x06, 0x17, 0x64,
	0x59, 0x8b, 0x68, 0xc5, 0xad, 0x35, 0x0d, 0x9f, 0xd3, 0x10, 0x32, 0xf2, 0x2b, 0xa2, 0xfd, 0x60,
	0x4d, 0x73, 0x72, 0x47, 0xc5, 0xbf, 0xbd, 0xa3, 0x70, 0x00, 0x3f, 0xa4, 0xd5, 0xfc, 0x96, 0x40,
	0x8a, 0xb7, 0x29, 0xfd, 0x43, 0xaf, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x52, 0x9f, 0x5c, 0x86,
	0x51, 0x03, 0x00, 0x00,
}
