// Code generated by protoc-gen-go. DO NOT EDIT.
// source: seal.proto

package seal

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TxMsgStatus int32

const (
	TxMsgStatus_NULL    TxMsgStatus = 0
	TxMsgStatus_SENT    TxMsgStatus = 1
	TxMsgStatus_SUCCEED TxMsgStatus = 2
	TxMsgStatus_FAILED  TxMsgStatus = 3
)

var TxMsgStatus_name = map[int32]string{
	0: "NULL",
	1: "SENT",
	2: "SUCCEED",
	3: "FAILED",
}

var TxMsgStatus_value = map[string]int32{
	"NULL":    0,
	"SENT":    1,
	"SUCCEED": 2,
	"FAILED":  3,
}

func (x TxMsgStatus) String() string {
	return proto.EnumName(TxMsgStatus_name, int32(x))
}

func (TxMsgStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a02c8d155741ea4f, []int{0}
}

type TransactorLog struct {
	MsgNum               uint32            `protobuf:"varint,1,opt,name=msg_num,json=msgNum,proto3" json:"msg_num,omitempty"`
	MsgType              map[string]uint32 `protobuf:"bytes,2,rep,name=msg_type,json=msgType,proto3" json:"msg_type,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Sender               string            `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	TxHash               string            `protobuf:"bytes,4,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	MsgsId               uint32            `protobuf:"varint,5,opt,name=msgs_id,json=msgsId,proto3" json:"msgs_id,omitempty"`
	Status               TxMsgStatus       `protobuf:"varint,6,opt,name=status,proto3,enum=seal.TxMsgStatus" json:"status,omitempty"`
	GasWanted            int64             `protobuf:"varint,7,opt,name=gas_wanted,json=gasWanted,proto3" json:"gas_wanted,omitempty"`
	GasUsed              int64             `protobuf:"varint,8,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	StartTimestamp       int64             `protobuf:"varint,99,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	ExecutionTimeMs      float64           `protobuf:"fixed64,100,opt,name=execution_time_ms,json=executionTimeMs,proto3" json:"execution_time_ms,omitempty"`
	Error                []string          `protobuf:"bytes,101,rep,name=error,proto3" json:"error,omitempty"`
	Warn                 []string          `protobuf:"bytes,102,rep,name=warn,proto3" json:"warn,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TransactorLog) Reset()         { *m = TransactorLog{} }
func (m *TransactorLog) String() string { return proto.CompactTextString(m) }
func (*TransactorLog) ProtoMessage()    {}
func (*TransactorLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_a02c8d155741ea4f, []int{0}
}

func (m *TransactorLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactorLog.Unmarshal(m, b)
}
func (m *TransactorLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactorLog.Marshal(b, m, deterministic)
}
func (m *TransactorLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactorLog.Merge(m, src)
}
func (m *TransactorLog) XXX_Size() int {
	return xxx_messageInfo_TransactorLog.Size(m)
}
func (m *TransactorLog) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactorLog.DiscardUnknown(m)
}

var xxx_messageInfo_TransactorLog proto.InternalMessageInfo

func (m *TransactorLog) GetMsgNum() uint32 {
	if m != nil {
		return m.MsgNum
	}
	return 0
}

func (m *TransactorLog) GetMsgType() map[string]uint32 {
	if m != nil {
		return m.MsgType
	}
	return nil
}

func (m *TransactorLog) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *TransactorLog) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *TransactorLog) GetMsgsId() uint32 {
	if m != nil {
		return m.MsgsId
	}
	return 0
}

func (m *TransactorLog) GetStatus() TxMsgStatus {
	if m != nil {
		return m.Status
	}
	return TxMsgStatus_NULL
}

func (m *TransactorLog) GetGasWanted() int64 {
	if m != nil {
		return m.GasWanted
	}
	return 0
}

func (m *TransactorLog) GetGasUsed() int64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func (m *TransactorLog) GetStartTimestamp() int64 {
	if m != nil {
		return m.StartTimestamp
	}
	return 0
}

func (m *TransactorLog) GetExecutionTimeMs() float64 {
	if m != nil {
		return m.ExecutionTimeMs
	}
	return 0
}

func (m *TransactorLog) GetError() []string {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *TransactorLog) GetWarn() []string {
	if m != nil {
		return m.Warn
	}
	return nil
}

type MsgLog struct {
	Type                 string       `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	EthAddress           string       `protobuf:"bytes,2,opt,name=eth_address,json=ethAddress,proto3" json:"eth_address,omitempty"`
	PubKey               string       `protobuf:"bytes,3,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Transactor           []string     `protobuf:"bytes,4,rep,name=transactor,proto3" json:"transactor,omitempty"`
	CandidateAddr        string       `protobuf:"bytes,5,opt,name=candidate_addr,json=candidateAddr,proto3" json:"candidate_addr,omitempty"`
	DelegatorAddr        string       `protobuf:"bytes,6,opt,name=delegator_addr,json=delegatorAddr,proto3" json:"delegator_addr,omitempty"`
	ChanInfo             *ChannelInfo `protobuf:"bytes,7,opt,name=chan_info,json=chanInfo,proto3" json:"chan_info,omitempty"`
	Penalty              *Penalty     `protobuf:"bytes,8,opt,name=penalty,proto3" json:"penalty,omitempty"`
	Deposit              string       `protobuf:"bytes,9,opt,name=deposit,proto3" json:"deposit,omitempty"`
	Change               *Change      `protobuf:"bytes,10,opt,name=change,proto3" json:"change,omitempty"`
	Govern               *Govern      `protobuf:"bytes,11,opt,name=govern,proto3" json:"govern,omitempty"`
	Sender               string       `protobuf:"bytes,99,opt,name=sender,proto3" json:"sender,omitempty"`
	ExecutionTimeMs      float64      `protobuf:"fixed64,100,opt,name=execution_time_ms,json=executionTimeMs,proto3" json:"execution_time_ms,omitempty"`
	Error                []string     `protobuf:"bytes,101,rep,name=error,proto3" json:"error,omitempty"`
	Warn                 []string     `protobuf:"bytes,102,rep,name=warn,proto3" json:"warn,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *MsgLog) Reset()         { *m = MsgLog{} }
func (m *MsgLog) String() string { return proto.CompactTextString(m) }
func (*MsgLog) ProtoMessage()    {}
func (*MsgLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_a02c8d155741ea4f, []int{1}
}

func (m *MsgLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgLog.Unmarshal(m, b)
}
func (m *MsgLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgLog.Marshal(b, m, deterministic)
}
func (m *MsgLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLog.Merge(m, src)
}
func (m *MsgLog) XXX_Size() int {
	return xxx_messageInfo_MsgLog.Size(m)
}
func (m *MsgLog) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLog.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLog proto.InternalMessageInfo

func (m *MsgLog) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *MsgLog) GetEthAddress() string {
	if m != nil {
		return m.EthAddress
	}
	return ""
}

func (m *MsgLog) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

func (m *MsgLog) GetTransactor() []string {
	if m != nil {
		return m.Transactor
	}
	return nil
}

func (m *MsgLog) GetCandidateAddr() string {
	if m != nil {
		return m.CandidateAddr
	}
	return ""
}

func (m *MsgLog) GetDelegatorAddr() string {
	if m != nil {
		return m.DelegatorAddr
	}
	return ""
}

func (m *MsgLog) GetChanInfo() *ChannelInfo {
	if m != nil {
		return m.ChanInfo
	}
	return nil
}

func (m *MsgLog) GetPenalty() *Penalty {
	if m != nil {
		return m.Penalty
	}
	return nil
}

func (m *MsgLog) GetDeposit() string {
	if m != nil {
		return m.Deposit
	}
	return ""
}

func (m *MsgLog) GetChange() *Change {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *MsgLog) GetGovern() *Govern {
	if m != nil {
		return m.Govern
	}
	return nil
}

func (m *MsgLog) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgLog) GetExecutionTimeMs() float64 {
	if m != nil {
		return m.ExecutionTimeMs
	}
	return 0
}

func (m *MsgLog) GetError() []string {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *MsgLog) GetWarn() []string {
	if m != nil {
		return m.Warn
	}
	return nil
}

type ChannelInfo struct {
	ChanId               string   `protobuf:"bytes,1,opt,name=chan_id,json=chanId,proto3" json:"chan_id,omitempty"`
	PeerFrom             string   `protobuf:"bytes,2,opt,name=peer_from,json=peerFrom,proto3" json:"peer_from,omitempty"`
	SeqNum               uint64   `protobuf:"varint,3,opt,name=seq_num,json=seqNum,proto3" json:"seq_num,omitempty"`
	TriggerTxHash        string   `protobuf:"bytes,4,opt,name=trigger_tx_hash,json=triggerTxHash,proto3" json:"trigger_tx_hash,omitempty"`
	GuardTxHash          string   `protobuf:"bytes,5,opt,name=guard_tx_hash,json=guardTxHash,proto3" json:"guard_tx_hash,omitempty"`
	Guards               []string `protobuf:"bytes,6,rep,name=guards,proto3" json:"guards,omitempty"`
	GuardIndex           uint32   `protobuf:"varint,7,opt,name=guard_index,json=guardIndex,proto3" json:"guard_index,omitempty"`
	TriggerBlknum        uint64   `protobuf:"varint,8,opt,name=trigger_blknum,json=triggerBlknum,proto3" json:"trigger_blknum,omitempty"`
	GuardBlknum          uint64   `protobuf:"varint,9,opt,name=guard_blknum,json=guardBlknum,proto3" json:"guard_blknum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelInfo) Reset()         { *m = ChannelInfo{} }
func (m *ChannelInfo) String() string { return proto.CompactTextString(m) }
func (*ChannelInfo) ProtoMessage()    {}
func (*ChannelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a02c8d155741ea4f, []int{2}
}

func (m *ChannelInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelInfo.Unmarshal(m, b)
}
func (m *ChannelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelInfo.Marshal(b, m, deterministic)
}
func (m *ChannelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelInfo.Merge(m, src)
}
func (m *ChannelInfo) XXX_Size() int {
	return xxx_messageInfo_ChannelInfo.Size(m)
}
func (m *ChannelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelInfo proto.InternalMessageInfo

func (m *ChannelInfo) GetChanId() string {
	if m != nil {
		return m.ChanId
	}
	return ""
}

func (m *ChannelInfo) GetPeerFrom() string {
	if m != nil {
		return m.PeerFrom
	}
	return ""
}

func (m *ChannelInfo) GetSeqNum() uint64 {
	if m != nil {
		return m.SeqNum
	}
	return 0
}

func (m *ChannelInfo) GetTriggerTxHash() string {
	if m != nil {
		return m.TriggerTxHash
	}
	return ""
}

func (m *ChannelInfo) GetGuardTxHash() string {
	if m != nil {
		return m.GuardTxHash
	}
	return ""
}

func (m *ChannelInfo) GetGuards() []string {
	if m != nil {
		return m.Guards
	}
	return nil
}

func (m *ChannelInfo) GetGuardIndex() uint32 {
	if m != nil {
		return m.GuardIndex
	}
	return 0
}

func (m *ChannelInfo) GetTriggerBlknum() uint64 {
	if m != nil {
		return m.TriggerBlknum
	}
	return 0
}

func (m *ChannelInfo) GetGuardBlknum() uint64 {
	if m != nil {
		return m.GuardBlknum
	}
	return 0
}

type Penalty struct {
	Nonce                uint64   `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Validator            string   `protobuf:"bytes,2,opt,name=validator,proto3" json:"validator,omitempty"`
	Reason               string   `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Penalty) Reset()         { *m = Penalty{} }
func (m *Penalty) String() string { return proto.CompactTextString(m) }
func (*Penalty) ProtoMessage()    {}
func (*Penalty) Descriptor() ([]byte, []int) {
	return fileDescriptor_a02c8d155741ea4f, []int{3}
}

func (m *Penalty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Penalty.Unmarshal(m, b)
}
func (m *Penalty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Penalty.Marshal(b, m, deterministic)
}
func (m *Penalty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Penalty.Merge(m, src)
}
func (m *Penalty) XXX_Size() int {
	return xxx_messageInfo_Penalty.Size(m)
}
func (m *Penalty) XXX_DiscardUnknown() {
	xxx_messageInfo_Penalty.DiscardUnknown(m)
}

var xxx_messageInfo_Penalty proto.InternalMessageInfo

func (m *Penalty) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Penalty) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *Penalty) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type Change struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	BlockNum             uint64   `protobuf:"varint,9,opt,name=block_num,json=blockNum,proto3" json:"block_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Change) Reset()         { *m = Change{} }
func (m *Change) String() string { return proto.CompactTextString(m) }
func (*Change) ProtoMessage()    {}
func (*Change) Descriptor() ([]byte, []int) {
	return fileDescriptor_a02c8d155741ea4f, []int{4}
}

func (m *Change) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Change.Unmarshal(m, b)
}
func (m *Change) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Change.Marshal(b, m, deterministic)
}
func (m *Change) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Change.Merge(m, src)
}
func (m *Change) XXX_Size() int {
	return xxx_messageInfo_Change.Size(m)
}
func (m *Change) XXX_DiscardUnknown() {
	xxx_messageInfo_Change.DiscardUnknown(m)
}

var xxx_messageInfo_Change proto.InternalMessageInfo

func (m *Change) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Change) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Change) GetBlockNum() uint64 {
	if m != nil {
		return m.BlockNum
	}
	return 0
}

type Govern struct {
	ProposalId           uint64   `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Amount               uint64   `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Option               uint32   `protobuf:"varint,4,opt,name=option,proto3" json:"option,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Govern) Reset()         { *m = Govern{} }
func (m *Govern) String() string { return proto.CompactTextString(m) }
func (*Govern) ProtoMessage()    {}
func (*Govern) Descriptor() ([]byte, []int) {
	return fileDescriptor_a02c8d155741ea4f, []int{5}
}

func (m *Govern) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Govern.Unmarshal(m, b)
}
func (m *Govern) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Govern.Marshal(b, m, deterministic)
}
func (m *Govern) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Govern.Merge(m, src)
}
func (m *Govern) XXX_Size() int {
	return xxx_messageInfo_Govern.Size(m)
}
func (m *Govern) XXX_DiscardUnknown() {
	xxx_messageInfo_Govern.DiscardUnknown(m)
}

var xxx_messageInfo_Govern proto.InternalMessageInfo

func (m *Govern) GetProposalId() uint64 {
	if m != nil {
		return m.ProposalId
	}
	return 0
}

func (m *Govern) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Govern) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Govern) GetOption() uint32 {
	if m != nil {
		return m.Option
	}
	return 0
}

func init() {
	proto.RegisterEnum("seal.TxMsgStatus", TxMsgStatus_name, TxMsgStatus_value)
	proto.RegisterType((*TransactorLog)(nil), "seal.TransactorLog")
	proto.RegisterMapType((map[string]uint32)(nil), "seal.TransactorLog.MsgTypeEntry")
	proto.RegisterType((*MsgLog)(nil), "seal.MsgLog")
	proto.RegisterType((*ChannelInfo)(nil), "seal.ChannelInfo")
	proto.RegisterType((*Penalty)(nil), "seal.Penalty")
	proto.RegisterType((*Change)(nil), "seal.Change")
	proto.RegisterType((*Govern)(nil), "seal.Govern")
}

func init() { proto.RegisterFile("seal.proto", fileDescriptor_a02c8d155741ea4f) }

var fileDescriptor_a02c8d155741ea4f = []byte{
	// 848 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xcf, 0x6e, 0xe3, 0xb6,
	0x13, 0xfe, 0xc9, 0xd6, 0xca, 0xd6, 0x28, 0x4e, 0xbc, 0xc4, 0x0f, 0xa9, 0xda, 0xed, 0x1f, 0xd7,
	0x68, 0xbb, 0xee, 0x1e, 0x72, 0x48, 0x2f, 0x45, 0x7a, 0xda, 0x66, 0xbd, 0xad, 0xd1, 0x24, 0x28,
	0x18, 0x07, 0x3d, 0x0a, 0xb4, 0xc9, 0xc8, 0x42, 0x24, 0x52, 0x4b, 0x52, 0x59, 0xfb, 0x99, 0xfa,
	0x30, 0x7d, 0x96, 0xbe, 0x41, 0x31, 0xa4, 0xe4, 0x38, 0x40, 0xaf, 0xbd, 0x71, 0xbe, 0xf9, 0x38,
	0x1c, 0xcd, 0xf7, 0x8d, 0x0d, 0x60, 0x04, 0x2b, 0xcf, 0x6a, 0xad, 0xac, 0x22, 0x21, 0x9e, 0xa7,
	0x7f, 0xf5, 0x61, 0xb4, 0xd4, 0x4c, 0x1a, 0xb6, 0xb6, 0x4a, 0x5f, 0xa9, 0x9c, 0x7c, 0x02, 0x83,
	0xca, 0xe4, 0x99, 0x6c, 0xaa, 0x34, 0x98, 0x04, 0xb3, 0x11, 0x8d, 0x2a, 0x93, 0xdf, 0x34, 0x15,
	0xf9, 0x09, 0x86, 0x98, 0xb0, 0xbb, 0x5a, 0xa4, 0xbd, 0x49, 0x7f, 0x96, 0x9c, 0x4f, 0xce, 0x5c,
	0xbd, 0x67, 0xf7, 0xcf, 0xae, 0x4d, 0xbe, 0xdc, 0xd5, 0x62, 0x2e, 0xad, 0xde, 0x51, 0x2c, 0x85,
	0x11, 0x39, 0x85, 0xc8, 0x08, 0xc9, 0x85, 0x4e, 0xfb, 0x93, 0x60, 0x16, 0xd3, 0x36, 0xc2, 0xd7,
	0xec, 0x36, 0xdb, 0x30, 0xb3, 0x49, 0x43, 0x9f, 0xb0, 0xdb, 0x5f, 0x99, 0xd9, 0xb4, 0x6d, 0x98,
	0xac, 0xe0, 0xe9, 0x8b, 0x7d, 0x1b, 0x66, 0xc1, 0xc9, 0xf7, 0x10, 0x19, 0xcb, 0x6c, 0x63, 0xd2,
	0x68, 0x12, 0xcc, 0x8e, 0xcf, 0x5f, 0xb6, 0x4d, 0x6c, 0xaf, 0x4d, 0x7e, 0xeb, 0x12, 0xb4, 0x25,
	0x90, 0x2f, 0x00, 0x72, 0x66, 0xb2, 0x8f, 0x4c, 0x5a, 0xc1, 0xd3, 0xc1, 0x24, 0x98, 0xf5, 0x69,
	0x9c, 0x33, 0xf3, 0x87, 0x03, 0xc8, 0xa7, 0x30, 0xc4, 0x74, 0x63, 0x04, 0x4f, 0x87, 0x2e, 0x39,
	0xc8, 0x99, 0xb9, 0x33, 0x82, 0x93, 0xd7, 0x70, 0x62, 0x2c, 0xd3, 0x36, 0xb3, 0x45, 0x25, 0x8c,
	0x65, 0x55, 0x9d, 0xae, 0x1d, 0xe3, 0xd8, 0xc1, 0xcb, 0x0e, 0x25, 0x6f, 0xe0, 0xa5, 0xd8, 0x8a,
	0x75, 0x63, 0x0b, 0x25, 0x1d, 0x39, 0xab, 0x4c, 0xca, 0x27, 0xc1, 0x2c, 0xa0, 0x27, 0xfb, 0x04,
	0xd2, 0xaf, 0x0d, 0xf9, 0x3f, 0xbc, 0x10, 0x5a, 0x2b, 0x9d, 0x8a, 0x49, 0x7f, 0x16, 0x53, 0x1f,
	0x10, 0x02, 0xe1, 0x47, 0xa6, 0x65, 0x7a, 0xef, 0x40, 0x77, 0xfe, 0xec, 0x02, 0x8e, 0x0e, 0xc7,
	0x48, 0xc6, 0xd0, 0x7f, 0x10, 0x3b, 0xa7, 0x47, 0x4c, 0xf1, 0x88, 0xb5, 0x1e, 0x59, 0xd9, 0xa0,
	0x12, 0x38, 0x1c, 0x1f, 0x5c, 0xf4, 0x7e, 0x0c, 0xa6, 0x7f, 0xf7, 0x21, 0xba, 0x36, 0x39, 0x4a,
	0x49, 0x20, 0x74, 0x6a, 0xf9, 0x7b, 0xee, 0x4c, 0xbe, 0x82, 0x44, 0xd8, 0x4d, 0xc6, 0x38, 0xd7,
	0xc2, 0x18, 0x77, 0x3d, 0xa6, 0x20, 0xec, 0xe6, 0xad, 0x47, 0x70, 0xf0, 0x75, 0xb3, 0xca, 0xf0,
	0xbd, 0x56, 0xaa, 0xba, 0x59, 0xfd, 0x26, 0x76, 0xe4, 0x4b, 0x00, 0xbb, 0x57, 0x3a, 0x0d, 0x5d,
	0xbb, 0x07, 0x08, 0xf9, 0x16, 0x8e, 0xd7, 0x4c, 0xf2, 0x82, 0x33, 0x2b, 0x5c, 0x7d, 0x27, 0x5c,
	0x4c, 0x47, 0x7b, 0x14, 0x9f, 0x40, 0x1a, 0x17, 0xa5, 0xc8, 0x99, 0x55, 0xda, 0xd3, 0x22, 0x4f,
	0xdb, 0xa3, 0x8e, 0x76, 0x06, 0xf1, 0x7a, 0xc3, 0x64, 0x56, 0xc8, 0x7b, 0xe5, 0xa4, 0x4b, 0x3a,
	0xa5, 0x2f, 0x37, 0x4c, 0x4a, 0x51, 0x2e, 0xe4, 0xbd, 0xa2, 0x43, 0xe4, 0xe0, 0x89, 0xbc, 0x86,
	0x41, 0x2d, 0x24, 0x2b, 0xed, 0xce, 0x69, 0x99, 0x9c, 0x8f, 0x3c, 0xfb, 0x77, 0x0f, 0xd2, 0x2e,
	0x4b, 0x52, 0x18, 0x70, 0x51, 0x2b, 0x53, 0xd8, 0x34, 0x76, 0x0f, 0x77, 0x21, 0xf9, 0x06, 0x22,
	0x2c, 0x97, 0x8b, 0x14, 0x5c, 0x85, 0xa3, 0xa7, 0xf7, 0x72, 0x41, 0xdb, 0x1c, 0xb2, 0x72, 0xf5,
	0x28, 0xb4, 0x4c, 0x93, 0x43, 0xd6, 0x2f, 0x0e, 0xa3, 0x6d, 0xee, 0xc0, 0xef, 0xeb, 0x67, 0x7e,
	0xff, 0x4f, 0xfc, 0x32, 0xfd, 0xb3, 0x07, 0xc9, 0xc1, 0x58, 0x50, 0x43, 0x3f, 0x3c, 0xde, 0x6a,
	0xef, 0x9a, 0x5f, 0x70, 0xf2, 0x0a, 0xe2, 0x5a, 0x08, 0x9d, 0xdd, 0x6b, 0x55, 0xb5, 0xda, 0x0f,
	0x11, 0x78, 0xaf, 0x55, 0x85, 0xb7, 0x8c, 0xf8, 0xe0, 0x36, 0x1f, 0x95, 0x0f, 0xb1, 0xe9, 0x0f,
	0xb8, 0xf9, 0xdf, 0xc1, 0x89, 0xd5, 0x45, 0x9e, 0x0b, 0x9d, 0x3d, 0x5f, 0xd6, 0x51, 0x0b, 0x2f,
	0xfd, 0xce, 0x4e, 0x61, 0x94, 0x37, 0x4c, 0xf3, 0x3d, 0xcb, 0x1b, 0x20, 0x71, 0x60, 0xcb, 0x39,
	0x85, 0xc8, 0x85, 0xb8, 0xbe, 0xf8, 0x01, 0x6d, 0x84, 0xbe, 0xf4, 0x77, 0x0b, 0xc9, 0xc5, 0xd6,
	0x29, 0x3e, 0xa2, 0xe0, 0xa0, 0x05, 0x22, 0xe8, 0x9b, 0xae, 0x89, 0x55, 0xf9, 0x80, 0x4d, 0x0e,
	0x5d, 0x93, 0x5d, 0x0f, 0x3f, 0x3b, 0x90, 0x7c, 0x0d, 0x47, 0xbe, 0x4e, 0x4b, 0x8a, 0x1d, 0xc9,
	0xd7, 0xf6, 0x94, 0xe9, 0x1d, 0x0c, 0x5a, 0x57, 0xe0, 0x88, 0xa5, 0x92, 0x6b, 0xbf, 0x22, 0x21,
	0xf5, 0x01, 0xf9, 0x1c, 0xe2, 0x47, 0x56, 0xa2, 0x65, 0x95, 0x6e, 0xa7, 0xf4, 0x04, 0xe0, 0x17,
	0x68, 0xc1, 0x8c, 0x92, 0xdd, 0x7e, 0xf8, 0x68, 0xba, 0x80, 0xc8, 0x5b, 0x85, 0x1c, 0x43, 0xaf,
	0x9d, 0x7c, 0x48, 0x7b, 0x05, 0xdf, 0xef, 0x61, 0xef, 0x60, 0x0f, 0x5f, 0x41, 0xbc, 0x2a, 0xd5,
	0xfa, 0x21, 0x7b, 0x6a, 0x72, 0xe8, 0x80, 0x9b, 0xa6, 0x9a, 0x56, 0x10, 0x79, 0x3f, 0xe1, 0x58,
	0x6a, 0xad, 0x6a, 0x65, 0x58, 0x99, 0xed, 0x6b, 0x42, 0x07, 0x2d, 0xfe, 0xbd, 0xf6, 0x29, 0x44,
	0xac, 0x52, 0x8d, 0xb4, 0x9d, 0x8e, 0x3e, 0x42, 0x5c, 0xd5, 0x68, 0x30, 0x27, 0xdf, 0x88, 0xb6,
	0xd1, 0x9b, 0x0b, 0x48, 0x0e, 0x7e, 0x3e, 0xc9, 0x10, 0xc2, 0x9b, 0xbb, 0xab, 0xab, 0xf1, 0xff,
	0xf0, 0x74, 0x3b, 0xbf, 0x59, 0x8e, 0x03, 0x92, 0xc0, 0xe0, 0xf6, 0xee, 0xf2, 0x72, 0x3e, 0x7f,
	0x37, 0xee, 0x11, 0x80, 0xe8, 0xfd, 0xdb, 0xc5, 0xd5, 0xfc, 0xdd, 0xb8, 0xbf, 0x8a, 0xdc, 0xbf,
	0xc9, 0x0f, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x83, 0x72, 0x84, 0x5b, 0x06, 0x00, 0x00,
}
