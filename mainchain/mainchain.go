// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package mainchain

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// GuardABI is the input ABI used to generate the binding from.
const GuardABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"minStakingPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"subscriptionDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blameTimeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VALIDATOR_SET_MAX_SIZE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miningPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"redeemedMiningReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sidechainGoLiveTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"redeemedServiceReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"celerToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"servicePool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validatorSet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minValidatorNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usedPenaltyNonce\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_celerTokenAddress\",\"type\":\"address\"},{\"name\":\"_blameTimeout\",\"type\":\"uint256\"},{\"name\":\"_minValidatorNum\",\"type\":\"uint256\"},{\"name\":\"_minStakingPool\",\"type\":\"uint256\"},{\"name\":\"_sidechainGoLiveTimeout\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contribution\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"miningPoolSize\",\"type\":\"uint256\"}],\"name\":\"MiningPoolContribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"candidate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"minSelfStake\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"sidechainAddr\",\"type\":\"bytes\"}],\"name\":\"InitializeCandidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"candidate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newStake\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stakingPool\",\"type\":\"uint256\"}],\"name\":\"Delegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"candidate\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"oldSidechainAddr\",\"type\":\"bytes\"},{\"indexed\":true,\"name\":\"newSidechainAddr\",\"type\":\"bytes\"}],\"name\":\"UpdateSidechainAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"ethAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"changeType\",\"type\":\"uint8\"}],\"name\":\"ValidatorChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"candidate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFromUnbondedCandidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"candidate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"intendTime\",\"type\":\"uint256\"}],\"name\":\"IntendWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"candidate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ConfirmWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddSubscriptionBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Punish\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"indemnitee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Indemnify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"CandidateUnbonded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"miningReward\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"serviceReward\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"miningPool\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"servicePool\",\"type\":\"uint256\"}],\"name\":\"RedeemReward\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"contributeToMiningPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minSelfStake\",\"type\":\"uint256\"},{\"name\":\"_sidechainAddr\",\"type\":\"bytes\"}],\"name\":\"initializeCandidate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_candidateAddr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"delegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sidechainAddr\",\"type\":\"bytes\"}],\"name\":\"updateSidechainAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimValidator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_candidateAddr\",\"type\":\"address\"}],\"name\":\"confirmUnbondedCandidate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_candidateAddr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromUnbondedCandidate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_candidateAddr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"intendWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_candidateAddr\",\"type\":\"address\"}],\"name\":\"confirmWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"subscribe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_penaltyRequest\",\"type\":\"bytes\"}],\"name\":\"punish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rewardRequest\",\"type\":\"bytes\"}],\"name\":\"redeemReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getValidatorNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinStakingPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidateAddr\",\"type\":\"address\"}],\"name\":\"getCandidateInfo\",\"outputs\":[{\"name\":\"initialized\",\"type\":\"bool\"},{\"name\":\"minSelfStake\",\"type\":\"uint256\"},{\"name\":\"sidechainAddr\",\"type\":\"bytes\"},{\"name\":\"stakingPool\",\"type\":\"uint256\"},{\"name\":\"isVldt\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidateAddr\",\"type\":\"address\"},{\"name\":\"_delegatorAddr\",\"type\":\"address\"}],\"name\":\"getDelegatorInfo\",\"outputs\":[{\"name\":\"delegatedStake\",\"type\":\"uint256\"},{\"name\":\"undelegatingStake\",\"type\":\"uint256\"},{\"name\":\"intentAmounts\",\"type\":\"uint256[]\"},{\"name\":\"intentIntendTimes\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinQuorumStakingPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// GuardBin is the compiled bytecode used for deploying new contracts.
var GuardBin = "0x60806040523480156200001157600080fd5b50604051620035e2380380620035e2833981810160405260a08110156200003757600080fd5b50805160208201516040830151606084015160809094015160008054600160a060020a031916600160a060020a038616179055600183905560028290556004859055929391929091906200009a4382640100000000620000a98102620024881704565b60035550620000c39350505050565b600082820183811015620000bc57600080fd5b9392505050565b61350f80620000d36000396000f3fe608060405234801561001057600080fd5b5060043610610202576000357c01000000000000000000000000000000000000000000000000000000009004806387e53fef1161012c578063d2bfc1c7116100bf578063ea5976a91161008e578063ea5976a9146106b1578063eecefef8146106b9578063facd743b1461078e578063fb878749146107c857610202565b8063d2bfc1c7146105f6578063e02f39bd1461061c578063e42a06c81461068c578063e64808f31461069457610202565b8063bb9053d0116100fb578063bb9053d01461055a578063c57f666114610586578063c6c21e9d146105ac578063c7ec2f35146105d057610202565b806387e53fef1461051c5780638e9472a3146105425780639ff296ca1461054a578063a3e814b91461055257610202565b806328bde1e1116101a45780636e7cf85d116101735780636e7cf85d14610470578063733975971461047857806373a6e45014610480578063785f8ffd146104f057610202565b806328bde1e1146103195780633620d149146103db5780634b7dba6b1461044b57806363a20c061461046857610202565b80631cfe4f0b116101e05780631cfe4f0b1461026c5780631e77733a146102745780632218d2551461029a57806326c36617146102a257610202565b8063026e402b146102075780630f574ba7146102355780631172037a14610252575b600080fd5b6102336004803603604081101561021d57600080fd5b50600160a060020a0381351690602001356107e5565b005b6102336004803603602081101561024b57600080fd5b503561092d565b61025a610a9e565b60408051918252519081900360200190f35b61025a610aa4565b61025a6004803603602081101561028a57600080fd5b5035600160a060020a0316610ae7565b61025a610af9565b610233600480360360408110156102b857600080fd5b813591908101906040810160208201356401000000008111156102da57600080fd5b8201836020820111156102ec57600080fd5b8035906020019184600183028401116401000000008311171561030e57600080fd5b509092509050610aff565b61033f6004803603602081101561032f57600080fd5b5035600160a060020a0316610be1565b60405180861515151581526020018581526020018060200184815260200183151515158152602001828103825285818151815260200191508051906020019080838360005b8381101561039c578181015183820152602001610384565b50505050905090810190601f1680156103c95780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b610233600480360360208110156103f157600080fd5b81019060208101813564010000000081111561040c57600080fd5b82018360208201111561041e57600080fd5b8035906020019184600183028401116401000000008311171561044057600080fd5b509092509050610cbc565b6102336004803603602081101561046157600080fd5b5035611253565b61025a6112d5565b6102336112da565b61025a6115e8565b6102336004803603602081101561049657600080fd5b8101906020810181356401000000008111156104b157600080fd5b8201836020820111156104c357600080fd5b803590602001918460018302840111640100000000831117156104e557600080fd5b5090925090506115ee565b6102336004803603604081101561050657600080fd5b50600160a060020a03813516906020013561192d565b61025a6004803603602081101561053257600080fd5b5035600160a060020a0316611a52565b61025a611a64565b61025a611b55565b61025a611b5b565b6102336004803603604081101561057057600080fd5b50600160a060020a038135169060200135611b9a565b61025a6004803603602081101561059c57600080fd5b5035600160a060020a0316611c9a565b6105b4611cac565b60408051600160a060020a039092168252519081900360200190f35b610233600480360360208110156105e657600080fd5b5035600160a060020a0316611cbb565b6102336004803603602081101561060c57600080fd5b5035600160a060020a0316611d4d565b6102336004803603602081101561063257600080fd5b81019060208101813564010000000081111561064d57600080fd5b82018360208201111561065f57600080fd5b8035906020019184600183028401116401000000008311171561068157600080fd5b509092509050611f4d565b61025a612187565b6105b4600480360360208110156106aa57600080fd5b503561218d565b61025a6121aa565b6106e7600480360360408110156106cf57600080fd5b50600160a060020a03813581169160200135166121b0565b604051808581526020018481526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561073757818101518382015260200161071f565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561077657818101518382015260200161075e565b50505050905001965050505050505060405180910390f35b6107b4600480360360208110156107a457600080fd5b5035600160a060020a03166122eb565b604080519115158252519081900360200190f35b6107b4600480360360208110156107de57600080fd5b5035612322565b81600160a060020a038116610832576040805160e560020a62461bcd02815260206004820152600960248201526000805160206134bb833981519152604482015290519081900360640190fd5b600160a060020a0383166000908152601660205260409020805460ff166108a3576040805160e560020a62461bcd02815260206004820152601c60248201527f43616e646964617465206973206e6f7420696e697469616c697a656400000000604482015290519081900360640190fd5b336108b18282866000612337565b6000546108cf90600160a060020a031682308763ffffffff6123d916565b84600160a060020a031681600160a060020a03167f500599802164a08023e87ffc3eed0ba3ae60697b3083ba81d046683679d81c6b868560030154604051808381526020018281526020019250505060405180910390a35050505050565b600354431015610987576040805160e560020a62461bcd02815260206004820152601560248201527f53696465636861696e206973206e6f74206c6976650000000000000000000000604482015290519081900360640190fd5b600254610992610aa4565b10156109e8576040805160e560020a62461bcd02815260206004820152601260248201527f546f6f206665772076616c696461746f72730000000000000000000000000000604482015290519081900360640190fd5b60065433906109fd908363ffffffff61248816565b600655600160a060020a038116600090815260056020526040902054610a29908363ffffffff61248816565b600160a060020a038083166000908152600560205260408120929092559054610a5b911682308563ffffffff6123d916565b604080518381529051600160a060020a038316917fac095ced75d400384d8404a37883183a56b937b8ff8195fa0c52c3ccc8bb8a49919081900360200190a25050565b60045481565b600080805b600b811015610ae0576000600a82600b8110610ac157fe5b0154600160a060020a031614610ad8576001909101905b600101610aa9565b5090505b90565b60056020526000908152604090205481565b60015481565b336000908152601660205260409020805460ff1615610b68576040805160e560020a62461bcd02815260206004820152601860248201527f43616e64696461746520697320696e697469616c697a65640000000000000000604482015290519081900360640190fd5b805460ff1916600190811782558101849055610b88600282018484613380565b50828260405180838380828437604080519390910183900383208a845290519095503394507f377f6597c5132797119197fab0e953f73fd5bb109a897a11c871834af2d092a9935091829003602001919050a350505050565b600160a060020a038116600090815260166020908152604080832080546001808301546002808501805487516101009582161595909502600019011691909104601f810188900488028401880190965285835260ff909316969095606095919485949093929091830182828015610c995780601f10610c6e57610100808354040283529160200191610c99565b820191906000526020600020905b815481529060010190602001808311610c7c57829003601f168201915b5050505050935080600301549250610cb0876122eb565b91505091939590929450565b600354431015610d16576040805160e560020a62461bcd02815260206004820152601560248201527f53696465636861696e206973206e6f74206c6976650000000000000000000000604482015290519081900360640190fd5b600254610d21610aa4565b1015610d77576040805160e560020a62461bcd02815260206004820152601260248201527f546f6f206665772076616c696461746f72730000000000000000000000000000604482015290519081900360640190fd5b610d7f6133fe565b610dbe83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506124a392505050565b9050610dc8613418565b8151610dd3906125fa565b9050600082600001516040518082805190602001908083835b60208310610e0b5780518252601f199092019160209182019101610dec565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050610e48818460200151612876565b610e9c576040805160e560020a62461bcd02815260206004820152601c60248201527f4661696c20746f20636865636b2076616c696461746f72207369677300000000604482015290519081900360640190fd5b815167ffffffffffffffff1660009081526015602052604090205460ff1615610f0f576040805160e560020a62461bcd02815260206004820152601260248201527f557365642070656e616c7479206e6f6e63650000000000000000000000000000604482015290519081900360640190fd5b816020015167ffffffffffffffff164310610f74576040805160e560020a62461bcd02815260206004820152600f60248201527f50656e616c747920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b815167ffffffffffffffff166000908152601560209081526040808320805460ff1916600117905580850151600160a060020a031683526016909152812090805b8460600151518110156110f257610fca613445565b85606001518281518110610fda57fe5b60200260200101519050610ffb81602001518461248890919063ffffffff16565b92508060000151600160a060020a03168660400151600160a060020a03167f111897aba775ed4cb659e35805c453dcd8f0024cc414f560f9677bdfae30952a83602001516040518082815260200191505060405180910390a38051600160a060020a031660009081526004850160209081526040909120908201518154106110975761109285836000015184602001516001612337565b6110e8565b805460208301516000916110b1919063ffffffff61293f16565b60018301549091506110c9908263ffffffff61293f16565b82600101819055506110e686846000015184600001546001612337565b505b5050600101610fb5565b506111008460400151612954565b6000805b8560800151518110156111f157611119613445565b8660800151828151811061112957fe5b6020026020010151905061114a81602001518461248890919063ffffffff16565b92508060000151600160a060020a03167f5739ab1e78cc400665fe049852d266e9ac5995451b5e666b25f3c30b19087d8e82602001516040518082815260200191505060405180910390a28051600160a060020a03166111c35760208101516008546111bb9163ffffffff61248816565b6008556111e8565b805160208201516000546111e892600160a060020a039091169163ffffffff6129dd16565b50600101611104565b50808214611249576040805160e560020a62461bcd02815260206004820152601460248201527f416d6f756e7420646f65736e2774206d61746368000000000000000000000000604482015290519081900360640190fd5b5050505050505050565b6008543390611268908363ffffffff61248816565b60085560005461128990600160a060020a031682308563ffffffff6123d916565b6008546040805184815260208101929092528051600160a060020a038416927f97e19c4040b6c46d4275e0c4fea68f8f92c81138372ffdb089932c211938f76592908290030190a25050565b600b81565b336000818152601660205260409020805460ff16611342576040805160e560020a62461bcd02815260206004820152601c60248201527f43616e646964617465206973206e6f7420696e697469616c697a656400000000604482015290519081900360640190fd5b6000600582015460ff16600281111561135757fe5b1461136157600080fd5b600454816003015410156113bf576040805160e560020a62461bcd02815260206004820152601960248201527f496e73756666696369656e74207374616b696e6720706f6f6c00000000000000604482015290519081900360640190fd5b6001810154600160a060020a03831660009081526004830160205260409020541015611435576040805160e560020a62461bcd02815260206004820152601560248201527f4e6f7420656e6f7567682073656c66207374616b650000000000000000000000604482015290519081900360640190fd5b600a54600160a060020a039081166000818152601660205260408120600301549092909190851614156114b2576040805160e560020a62461bcd02815260206004820152601860248201527f416c726561647920696e2076616c696461746f72207365740000000000000000604482015290519081900360640190fd5b60015b600b8110156115ab5784600160a060020a0316600a82600b81106114d557fe5b0154600160a060020a03161415611536576040805160e560020a62461bcd02815260206004820152601860248201527f416c726561647920696e2076616c696461746f72207365740000000000000000604482015290519081900360640190fd5b8160166000600a84600b811061154857fe5b0154600160a060020a0316815260208101919091526040016000206003015410156115a35780925060166000600a83600b811061158157fe5b0154600160a060020a0316815260208101919091526040016000206003015491505b6001016114b5565b506000600a83600b81106115bb57fe5b0154600160a060020a0316905080156115d7576115d783612a93565b6115e18584612b8a565b5050505050565b60085481565b600354431015611648576040805160e560020a62461bcd02815260206004820152601560248201527f53696465636861696e206973206e6f74206c6976650000000000000000000000604482015290519081900360640190fd5b600254611653610aa4565b10156116a9576040805160e560020a62461bcd02815260206004820152601260248201527f546f6f206665772076616c696461746f72730000000000000000000000000000604482015290519081900360640190fd5b6116b16133fe565b6116f083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612c5892505050565b90506116fa61345c565b815161170590612da6565b9050600082600001516040518082805190602001908083835b6020831061173d5780518252601f19909201916020918201910161171e565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020905061177a818460200151612876565b6117ce576040805160e560020a62461bcd02815260206004820152601c60248201527f4661696c20746f20636865636b2076616c696461746f72207369677300000000604482015290519081900360640190fd5b8151600160a060020a03166000908152600960209081526040822054908401516117fd9163ffffffff61293f16565b6020808501518551600160a060020a039081166000908152600984526040808220939093558751909116815260079092528082205490860151929350909161184a9163ffffffff61293f16565b6040808601518651600160a060020a0316600090815260076020529190912055600854909150611880908363ffffffff61293f16565b600855600654611896908263ffffffff61293f16565b60065583516118c8906118af848463ffffffff61248816565b600054600160a060020a0316919063ffffffff6129dd16565b8351600854600654604080518681526020810186905280820193909352606083019190915251600160a060020a03909216917f960a5cc298ffb55e7c3f1b994053dcf9298367b34bf7699d94368be331558b2e9181900360800190a250505050505050565b81600160a060020a03811661197a576040805160e560020a62461bcd02815260206004820152600960248201526000805160206134bb833981519152604482015290519081900360640190fd5b600160a060020a0383166000908152601660209081526040808320338085526004820190935292209091906119b28284876001612337565b60018101546119c7908663ffffffff61248816565b60018201556119d586612954565b600481018054600090815260028301602090815260409182902088815543600180830191825585540190945592548251898152918201528151600160a060020a03808b1693908816927f7171946bb2a9ef55fcb2eb8cef679db45e2e3a8cef9a44567d34d202b65ff0b1929081900390910190a350505050505050565b60096020526000908152604090205481565b600080805b600b811015611ad6576000600a82600b8110611a8157fe5b0154600160a060020a03161415611a9757611ace565b60166000600a83600b8110611aa857fe5b0154600160a060020a031681526020810191909152604001600020600301549150611ad6565b600101611a69565b6001015b600b811015610ae0578160166000600a84600b8110611af557fe5b0154600160a060020a031681526020810191909152604001600020600301541015611b4d5760166000600a83600b8110611b2b57fe5b0154600160a060020a0316815260208101919091526040016000206003015491505b600101611ada565b60035481565b6000611b956001611b896003611b7d6002601754612e6690919063ffffffff16565b9063ffffffff612e8d16565b9063ffffffff61248816565b905090565b81600160a060020a038116611be7576040805160e560020a62461bcd02815260206004820152600960248201526000805160206134bb833981519152604482015290519081900360640190fd5b600160a060020a038316600090815260166020526040812090600582015460ff166002811115611c1357fe5b14611c1d57600080fd5b33611c2b8282866001612337565b600054611c4890600160a060020a0316828663ffffffff6129dd16565b84600160a060020a031681600160a060020a03167f585e40624b400c05be4193af453d2fd2e69facd17163bda6afd44546f3dbbaa8866040518082815260200191505060405180910390a35050505050565b60076020526000908152604090205481565b600054600160a060020a031681565b600160a060020a03811660009081526016602052604090206002600582015460ff166002811115611ce857fe5b14611cf257600080fd5b8060060154431015611d0357600080fd5b60058101805460ff19169055600060068201819055604051600160a060020a038416917fbe85a9a7aa606febeaa35606e49cd7324c63cf970f4f5fd0c7e983f42b20b21991a25050565b80600160a060020a038116611d9a576040805160e560020a62461bcd02815260206004820152600960248201526000805160206134bb833981519152604482015290519081900360640190fd5b600160a060020a0382166000818152601660208181526040808420338086526004820184529185209585529290915260059091015490929143918190819060ff166002811115611de657fe5b149050836003015491505b8360040154821015611e6457600082815260028501602052604090208180611e31575083611e2e600154836001015461248890919063ffffffff16565b11155b15611e5357506000828152600285016020526040812081815560010155611e59565b50611e64565b600190910190611df1565b6003840182905560005b8460040154831015611eac57600083815260028601602052604090208054611e9d90839063ffffffff61248816565b6001909401939150611e6e9050565b6001850154600090821015611ef7576001860154611ed0908363ffffffff61293f16565b60018701839055600054909150611ef790600160a060020a0316888363ffffffff6129dd16565b88600160a060020a031687600160a060020a03167f08d0283ea9a2e520a2f09611cf37ca6eb70f62e9a807e53756047dd2dc027220836040518082815260200191505060405180910390a3505050505050505050565b3360008181526016602052604081206005015460ff166002811115611f6e57fe5b14611fc3576040805160e560020a62461bcd02815260206004820152601a60248201527f6d73672e73656e646572206973206e6f7420756e626f6e646564000000000000604482015290519081900360640190fd5b600160a060020a0381166000908152601660205260409020805460ff16612034576040805160e560020a62461bcd02815260206004820152601c60248201527f43616e646964617465206973206e6f7420696e697469616c697a656400000000604482015290519081900360640190fd5b600281810180546040805160206001841615610100026000190190931694909404601f810183900483028501830190915280845260609392918301828280156120be5780601f10612093576101008083540402835291602001916120be565b820191906000526020600020905b8154815290600101906020018083116120a157829003601f168201915b509394506120d6935050506002840190508686613380565b5084846040518083838082843760405192018290038220865190955086945091925082916020850191508083835b602083106121235780518252601f199092019160209182019101612104565b5181516020939093036101000a600019018019909116921691909117905260405192018290038220935050600160a060020a03871691507f16de3299ab034ce7e21b22d55f4f9a1474bd3c4d20dbd1cc9bcd39c1ad3d5a2c90600090a45050505050565b60065481565b600a81600b811061219a57fe5b0154600160a060020a0316905081565b60025481565b600160a060020a03808316600090815260166020908152604080832093851683526004938401909152812060038101549281015491928392606092839290918591612201919063ffffffff61293f16565b90508060405190808252806020026020018201604052801561222d578160200160208202803883390190505b5093508060405190808252806020026020018201604052801561225a578160200160208202803883390190505b5060038301549093505b82600401548110156122d3576000818152600284016020526040902054855186908390811061228f57fe5b602002602001018181525050826002016000828152602001908152602001600020600101548482815181106122c057fe5b6020908102919091010152600101612264565b50508054600190910154909790965091945092509050565b60006001600160a060020a03831660009081526016602052604090206005015460ff16600281111561231957fe5b1490505b919050565b60156020526000908152604090205460ff1681565b600160a060020a038316600090815260048501602052604081209082600181111561235e57fe5b1415612397576003850154612379908463ffffffff61248816565b60038601558054612390908463ffffffff61248816565b81556115e1565b60018260018111156123a557fe5b14156123d75760038501546123c0908463ffffffff61293f16565b60038601558054612390908463ffffffff61293f16565bfe5b604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301528481166024830152604482018490529151918616916323b872dd916064808201926020929091908290030181600087803b15801561244d57600080fd5b505af1158015612461573d6000803e3d6000fd5b505050506040513d602081101561247757600080fd5b505161248257600080fd5b50505050565b60008282018381101561249a57600080fd5b90505b92915050565b6124ab6133fe565b6124b3613486565b6124bc83612eaf565b905060606124d182600263ffffffff612ec616565b9050806002815181106124e057fe5b602002602001015160405190808252806020026020018201604052801561251b57816020015b60608152602001906001900390816125065790505b50836020018190525060008160028151811061253357fe5b6020026020010181815250506000805b61254c84612f56565b156125f15761255a84612f62565b909250905081600114156125785761257184612f8f565b85526125ec565b81600214156125dc5761258a84612f8f565b85602001518460028151811061259c57fe5b6020026020010151815181106125ae57fe5b6020026020010181905250826002815181106125c657fe5b60209081029190910101805160010190526125ec565b6125ec848263ffffffff61301c16565b612543565b50505050919050565b612602613418565b61260a613486565b61261383612eaf565b9050606061262882600563ffffffff612ec616565b90508060048151811061263757fe5b602002602001015160405190808252806020026020018201604052801561267857816020015b612665613445565b81526020019060019003908161265d5790505b50836060018190525060008160048151811061269057fe5b602002602001018181525050806005815181106126a957fe5b60200260200101516040519080825280602002602001820160405280156126ea57816020015b6126d7613445565b8152602001906001900390816126cf5790505b50836080018190525060008160058151811061270257fe5b6020026020010181815250506000805b61271b84612f56565b156125f15761272984612f62565b90925090508160011415612751576127408461307d565b67ffffffffffffffff168552612871565b8160021415612777576127638461307d565b67ffffffffffffffff166020860152612871565b81600314156127a45761279161278c85612f8f565b6130db565b600160a060020a03166040860152612871565b8160041415612810576127be6127b985612f8f565b6130e6565b8560600151846004815181106127d057fe5b6020026020010151815181106127e257fe5b6020026020010181905250826004815181106127fa57fe5b6020908102919091010180516001019052612871565b8160051415612861576128256127b985612f8f565b85608001518460058151811061283757fe5b60200260200101518151811061284957fe5b6020026020010181905250826005815181106127fa57fe5b612871848263ffffffff61301c16565b612712565b600080612881611b5b565b9050600061288e8561317a565b9050600080805b8651811015612930576128c48782815181106128ad57fe5b6020026020010151856131cb90919063ffffffff16565b92506001600160a060020a03841660009081526016602052604090206005015460ff1660028111156128f257fe5b141561292857600160a060020a03831660009081526016602052604090206003015461292590839063ffffffff61248816565b91505b600101612895565b50929092101595945050505050565b60008282111561294e57600080fd5b50900390565b600160a060020a03811660009081526016602052604090206001600582015460ff16600281111561298157fe5b1461298c57506129da565b6001810154600160a060020a038316600090815260048084016020526040909120549054600384015492909110911081806129c45750805b15612482576124826129d58561329c565b612a93565b50565b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015612a5957600080fd5b505af1158015612a6d573d6000803e3d6000fd5b505050506040513d6020811015612a8357600080fd5b5051612a8e57600080fd5b505050565b6000600a82600b8110612aa257fe5b0154600160a060020a0316905080612aba57506129da565b600a82600b8110612ac757fe5b01805473ffffffffffffffffffffffffffffffffffffffff19169055600160a060020a0381166000908152601660205260409020600501805460ff19166002179055600154612b17904390612488565b600160a060020a0382166000908152601660205260409020600681019190915560030154601754612b4d9163ffffffff61293f16565b6017556001604051600160a060020a038316907f63f783ba869265648de5e70add96be9f4914e3bde064fdc19fd7e6a8ebf2f46c90600090a35050565b6000600a82600b8110612b9957fe5b0154600160a060020a031614612bae57600080fd5b81600a82600b8110612bbc57fe5b01805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039283161790558216600090815260166020526040812060058101805460ff19166001179055600681019190915560030154601754612c1b91612488565b6017556000604051600160a060020a038416907f63f783ba869265648de5e70add96be9f4914e3bde064fdc19fd7e6a8ebf2f46c90600090a35050565b612c606133fe565b612c68613486565b612c7183612eaf565b90506060612c8682600263ffffffff612ec616565b905080600281518110612c9557fe5b6020026020010151604051908082528060200260200182016040528015612cd057816020015b6060815260200190600190039081612cbb5790505b508360200181905250600081600281518110612ce857fe5b6020026020010181815250506000805b612d0184612f56565b156125f157612d0f84612f62565b90925090508160011415612d2d57612d2684612f8f565b8552612da1565b8160021415612d9157612d3f84612f8f565b856020015184600281518110612d5157fe5b602002602001015181518110612d6357fe5b602002602001018190525082600281518110612d7b57fe5b6020908102919091010180516001019052612da1565b612da1848263ffffffff61301c16565b612cf8565b612dae61345c565b612db6613486565b612dbf83612eaf565b90506000805b612dce83612f56565b15612e5e57612ddc83612f62565b90925090508160011415612e0657612df661278c84612f8f565b600160a060020a03168452612e59565b8160021415612e2a57612e20612e1b84612f8f565b613331565b6020850152612e59565b8160031415612e4957612e3f612e1b84612f8f565b6040850152612e59565b612e59838263ffffffff61301c16565b612dc5565b505050919050565b600082612e755750600061249d565b82820282848281612e8257fe5b041461249a57600080fd5b6000808211612e9b57600080fd5b6000828481612ea657fe5b04949350505050565b612eb7613486565b60208101919091526000815290565b815160408051600184018082526020808202830101909252606092918015612ef8578160200160208202803883390190505b5091506000805b612f0886612f56565b15612f4d57612f1686612f62565b80925081935050506001848381518110612f2c57fe5b602002602001018181510191508181525050612f48868261301c565b612eff565b50509092525090565b60208101515190511090565b6000806000612f708461307d565b9050600881049250806007166005811115612f8757fe5b915050915091565b60606000612f9c8361307d565b8351602085015151919250820190811115612fb657600080fd5b816040519080825280601f01601f191660200182016040528015612fe1576020820181803883390190505b50602080860151865192955091818601919083010160005b85811015613011578181015183820152602001612ff9565b505050935250919050565b600081600581111561302a57fe5b141561303f576130398261307d565b50613079565b600281600581111561304d57fe5b141561020257600061305e8361307d565b83518101808552602085015151919250111561303957600080fd5b5050565b602080820151825181019091015160009182805b600a8110156130d55783811a91508060070282607f169060020a028517945081608016600014156130cd5785510160010185525061231d915050565b600101613091565b50600080fd5b600061249d82613358565b6130ee613445565b6130f6613486565b6130ff83612eaf565b90506000805b61310e83612f56565b15612e5e5761311c83612f62565b909250905081600114156131465761313661278c84612f8f565b600160a060020a03168452613175565b81600214156131655761315b612e1b84612f8f565b6020850152613175565b613175838263ffffffff61301c16565b613105565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c909101909152815191012090565b60008060008084516041146131e6576000935050505061249d565b50505060208201516040830151606084015160001a601b81101561320857601b015b8060ff16601b1415801561322057508060ff16601c14155b15613231576000935050505061249d565b6040805160008152602080820180845289905260ff8416828401526060820186905260808201859052915160019260a0808401939192601f1981019281900390910190855afa158015613288573d6000803e3d6000fd5b50505060206040510351935050505061249d565b6000805b600b8110156132e05782600160a060020a0316600a82600b81106132c057fe5b0154600160a060020a031614156132d857905061231d565b6001016132a0565b506040805160e560020a62461bcd02815260206004820152601360248201527f4e6f207375636820612076616c696461746f7200000000000000000000000000604482015290519081900360640190fd5b600060208251111561334257600080fd5b506020818101519151600891030260020a900490565b6000815160141461336857600080fd5b50602001516c01000000000000000000000000900490565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106133c15782800160ff198235161785556133ee565b828001600101855582156133ee579182015b828111156133ee5782358255916020019190600101906133d3565b506133fa9291506134a0565b5090565b604051806040016040528060608152602001606081525090565b6040805160a081018252600080825260208201819052918101919091526060808201819052608082015290565b604080518082019091526000808252602082015290565b60405180606001604052806000600160a060020a0316815260200160008152602001600081525090565b604051806040016040528060008152602001606081525090565b610ae491905b808211156133fa57600081556001016134a656fe3020616464726573730000000000000000000000000000000000000000000000a265627a7a723058201c7a2b213bb8243b68424c5f289fe8d753b76f0459d366ded7898e972543241364736f6c634300050a0032"

// DeployGuard deploys a new Ethereum contract, binding an instance of Guard to it.
func DeployGuard(auth *bind.TransactOpts, backend bind.ContractBackend, _celerTokenAddress common.Address, _blameTimeout *big.Int, _minValidatorNum *big.Int, _minStakingPool *big.Int, _sidechainGoLiveTimeout *big.Int) (common.Address, *types.Transaction, *Guard, error) {
	parsed, err := abi.JSON(strings.NewReader(GuardABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(GuardBin), backend, _celerTokenAddress, _blameTimeout, _minValidatorNum, _minStakingPool, _sidechainGoLiveTimeout)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Guard{GuardCaller: GuardCaller{contract: contract}, GuardTransactor: GuardTransactor{contract: contract}, GuardFilterer: GuardFilterer{contract: contract}}, nil
}

// Guard is an auto generated Go binding around an Ethereum contract.
type Guard struct {
	GuardCaller     // Read-only binding to the contract
	GuardTransactor // Write-only binding to the contract
	GuardFilterer   // Log filterer for contract events
}

// GuardCaller is an auto generated read-only Go binding around an Ethereum contract.
type GuardCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GuardTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GuardTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GuardFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GuardFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GuardSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GuardSession struct {
	Contract     *Guard            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GuardCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GuardCallerSession struct {
	Contract *GuardCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// GuardTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GuardTransactorSession struct {
	Contract     *GuardTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GuardRaw is an auto generated low-level Go binding around an Ethereum contract.
type GuardRaw struct {
	Contract *Guard // Generic contract binding to access the raw methods on
}

// GuardCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GuardCallerRaw struct {
	Contract *GuardCaller // Generic read-only contract binding to access the raw methods on
}

// GuardTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GuardTransactorRaw struct {
	Contract *GuardTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGuard creates a new instance of Guard, bound to a specific deployed contract.
func NewGuard(address common.Address, backend bind.ContractBackend) (*Guard, error) {
	contract, err := bindGuard(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Guard{GuardCaller: GuardCaller{contract: contract}, GuardTransactor: GuardTransactor{contract: contract}, GuardFilterer: GuardFilterer{contract: contract}}, nil
}

// NewGuardCaller creates a new read-only instance of Guard, bound to a specific deployed contract.
func NewGuardCaller(address common.Address, caller bind.ContractCaller) (*GuardCaller, error) {
	contract, err := bindGuard(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GuardCaller{contract: contract}, nil
}

// NewGuardTransactor creates a new write-only instance of Guard, bound to a specific deployed contract.
func NewGuardTransactor(address common.Address, transactor bind.ContractTransactor) (*GuardTransactor, error) {
	contract, err := bindGuard(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GuardTransactor{contract: contract}, nil
}

// NewGuardFilterer creates a new log filterer instance of Guard, bound to a specific deployed contract.
func NewGuardFilterer(address common.Address, filterer bind.ContractFilterer) (*GuardFilterer, error) {
	contract, err := bindGuard(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GuardFilterer{contract: contract}, nil
}

// bindGuard binds a generic wrapper to an already deployed contract.
func bindGuard(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GuardABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Guard *GuardRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Guard.Contract.GuardCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Guard *GuardRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Guard.Contract.GuardTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Guard *GuardRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Guard.Contract.GuardTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Guard *GuardCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Guard.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Guard *GuardTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Guard.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Guard *GuardTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Guard.Contract.contract.Transact(opts, method, params...)
}

// VALIDATORSETMAXSIZE is a free data retrieval call binding the contract method 0x63a20c06.
//
// Solidity: function VALIDATOR_SET_MAX_SIZE() constant returns(uint256)
func (_Guard *GuardCaller) VALIDATORSETMAXSIZE(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Guard.contract.Call(opts, out, "VALIDATOR_SET_MAX_SIZE")
	return *ret0, err
}

// VALIDATORSETMAXSIZE is a free data retrieval call binding the contract method 0x63a20c06.
//
// Solidity: function VALIDATOR_SET_MAX_SIZE() constant returns(uint256)
func (_Guard *GuardSession) VALIDATORSETMAXSIZE() (*big.Int, error) {
	return _Guard.Contract.VALIDATORSETMAXSIZE(&_Guard.CallOpts)
}

// VALIDATORSETMAXSIZE is a free data retrieval call binding the contract method 0x63a20c06.
//
// Solidity: function VALIDATOR_SET_MAX_SIZE() constant returns(uint256)
func (_Guard *GuardCallerSession) VALIDATORSETMAXSIZE() (*big.Int, error) {
	return _Guard.Contract.VALIDATORSETMAXSIZE(&_Guard.CallOpts)
}

// BlameTimeout is a free data retrieval call binding the contract method 0x2218d255.
//
// Solidity: function blameTimeout() constant returns(uint256)
func (_Guard *GuardCaller) BlameTimeout(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Guard.contract.Call(opts, out, "blameTimeout")
	return *ret0, err
}

// BlameTimeout is a free data retrieval call binding the contract method 0x2218d255.
//
// Solidity: function blameTimeout() constant returns(uint256)
func (_Guard *GuardSession) BlameTimeout() (*big.Int, error) {
	return _Guard.Contract.BlameTimeout(&_Guard.CallOpts)
}

// BlameTimeout is a free data retrieval call binding the contract method 0x2218d255.
//
// Solidity: function blameTimeout() constant returns(uint256)
func (_Guard *GuardCallerSession) BlameTimeout() (*big.Int, error) {
	return _Guard.Contract.BlameTimeout(&_Guard.CallOpts)
}

// CelerToken is a free data retrieval call binding the contract method 0xc6c21e9d.
//
// Solidity: function celerToken() constant returns(address)
func (_Guard *GuardCaller) CelerToken(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Guard.contract.Call(opts, out, "celerToken")
	return *ret0, err
}

// CelerToken is a free data retrieval call binding the contract method 0xc6c21e9d.
//
// Solidity: function celerToken() constant returns(address)
func (_Guard *GuardSession) CelerToken() (common.Address, error) {
	return _Guard.Contract.CelerToken(&_Guard.CallOpts)
}

// CelerToken is a free data retrieval call binding the contract method 0xc6c21e9d.
//
// Solidity: function celerToken() constant returns(address)
func (_Guard *GuardCallerSession) CelerToken() (common.Address, error) {
	return _Guard.Contract.CelerToken(&_Guard.CallOpts)
}

// GetCandidateInfo is a free data retrieval call binding the contract method 0x28bde1e1.
//
// Solidity: function getCandidateInfo(address _candidateAddr) constant returns(bool initialized, uint256 minSelfStake, bytes sidechainAddr, uint256 stakingPool, bool isVldt)
func (_Guard *GuardCaller) GetCandidateInfo(opts *bind.CallOpts, _candidateAddr common.Address) (struct {
	Initialized   bool
	MinSelfStake  *big.Int
	SidechainAddr []byte
	StakingPool   *big.Int
	IsVldt        bool
}, error) {
	ret := new(struct {
		Initialized   bool
		MinSelfStake  *big.Int
		SidechainAddr []byte
		StakingPool   *big.Int
		IsVldt        bool
	})
	out := ret
	err := _Guard.contract.Call(opts, out, "getCandidateInfo", _candidateAddr)
	return *ret, err
}

// GetCandidateInfo is a free data retrieval call binding the contract method 0x28bde1e1.
//
// Solidity: function getCandidateInfo(address _candidateAddr) constant returns(bool initialized, uint256 minSelfStake, bytes sidechainAddr, uint256 stakingPool, bool isVldt)
func (_Guard *GuardSession) GetCandidateInfo(_candidateAddr common.Address) (struct {
	Initialized   bool
	MinSelfStake  *big.Int
	SidechainAddr []byte
	StakingPool   *big.Int
	IsVldt        bool
}, error) {
	return _Guard.Contract.GetCandidateInfo(&_Guard.CallOpts, _candidateAddr)
}

// GetCandidateInfo is a free data retrieval call binding the contract method 0x28bde1e1.
//
// Solidity: function getCandidateInfo(address _candidateAddr) constant returns(bool initialized, uint256 minSelfStake, bytes sidechainAddr, uint256 stakingPool, bool isVldt)
func (_Guard *GuardCallerSession) GetCandidateInfo(_candidateAddr common.Address) (struct {
	Initialized   bool
	MinSelfStake  *big.Int
	SidechainAddr []byte
	StakingPool   *big.Int
	IsVldt        bool
}, error) {
	return _Guard.Contract.GetCandidateInfo(&_Guard.CallOpts, _candidateAddr)
}

// GetDelegatorInfo is a free data retrieval call binding the contract method 0xeecefef8.
//
// Solidity: function getDelegatorInfo(address _candidateAddr, address _delegatorAddr) constant returns(uint256 delegatedStake, uint256 undelegatingStake, uint256[] intentAmounts, uint256[] intentIntendTimes)
func (_Guard *GuardCaller) GetDelegatorInfo(opts *bind.CallOpts, _candidateAddr common.Address, _delegatorAddr common.Address) (struct {
	DelegatedStake    *big.Int
	UndelegatingStake *big.Int
	IntentAmounts     []*big.Int
	IntentIntendTimes []*big.Int
}, error) {
	ret := new(struct {
		DelegatedStake    *big.Int
		UndelegatingStake *big.Int
		IntentAmounts     []*big.Int
		IntentIntendTimes []*big.Int
	})
	out := ret
	err := _Guard.contract.Call(opts, out, "getDelegatorInfo", _candidateAddr, _delegatorAddr)
	return *ret, err
}

// GetDelegatorInfo is a free data retrieval call binding the contract method 0xeecefef8.
//
// Solidity: function getDelegatorInfo(address _candidateAddr, address _delegatorAddr) constant returns(uint256 delegatedStake, uint256 undelegatingStake, uint256[] intentAmounts, uint256[] intentIntendTimes)
func (_Guard *GuardSession) GetDelegatorInfo(_candidateAddr common.Address, _delegatorAddr common.Address) (struct {
	DelegatedStake    *big.Int
	UndelegatingStake *big.Int
	IntentAmounts     []*big.Int
	IntentIntendTimes []*big.Int
}, error) {
	return _Guard.Contract.GetDelegatorInfo(&_Guard.CallOpts, _candidateAddr, _delegatorAddr)
}

// GetDelegatorInfo is a free data retrieval call binding the contract method 0xeecefef8.
//
// Solidity: function getDelegatorInfo(address _candidateAddr, address _delegatorAddr) constant returns(uint256 delegatedStake, uint256 undelegatingStake, uint256[] intentAmounts, uint256[] intentIntendTimes)
func (_Guard *GuardCallerSession) GetDelegatorInfo(_candidateAddr common.Address, _delegatorAddr common.Address) (struct {
	DelegatedStake    *big.Int
	UndelegatingStake *big.Int
	IntentAmounts     []*big.Int
	IntentIntendTimes []*big.Int
}, error) {
	return _Guard.Contract.GetDelegatorInfo(&_Guard.CallOpts, _candidateAddr, _delegatorAddr)
}

// GetMinQuorumStakingPool is a free data retrieval call binding the contract method 0xa3e814b9.
//
// Solidity: function getMinQuorumStakingPool() constant returns(uint256)
func (_Guard *GuardCaller) GetMinQuorumStakingPool(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Guard.contract.Call(opts, out, "getMinQuorumStakingPool")
	return *ret0, err
}

// GetMinQuorumStakingPool is a free data retrieval call binding the contract method 0xa3e814b9.
//
// Solidity: function getMinQuorumStakingPool() constant returns(uint256)
func (_Guard *GuardSession) GetMinQuorumStakingPool() (*big.Int, error) {
	return _Guard.Contract.GetMinQuorumStakingPool(&_Guard.CallOpts)
}

// GetMinQuorumStakingPool is a free data retrieval call binding the contract method 0xa3e814b9.
//
// Solidity: function getMinQuorumStakingPool() constant returns(uint256)
func (_Guard *GuardCallerSession) GetMinQuorumStakingPool() (*big.Int, error) {
	return _Guard.Contract.GetMinQuorumStakingPool(&_Guard.CallOpts)
}

// GetMinStakingPool is a free data retrieval call binding the contract method 0x8e9472a3.
//
// Solidity: function getMinStakingPool() constant returns(uint256)
func (_Guard *GuardCaller) GetMinStakingPool(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Guard.contract.Call(opts, out, "getMinStakingPool")
	return *ret0, err
}

// GetMinStakingPool is a free data retrieval call binding the contract method 0x8e9472a3.
//
// Solidity: function getMinStakingPool() constant returns(uint256)
func (_Guard *GuardSession) GetMinStakingPool() (*big.Int, error) {
	return _Guard.Contract.GetMinStakingPool(&_Guard.CallOpts)
}

// GetMinStakingPool is a free data retrieval call binding the contract method 0x8e9472a3.
//
// Solidity: function getMinStakingPool() constant returns(uint256)
func (_Guard *GuardCallerSession) GetMinStakingPool() (*big.Int, error) {
	return _Guard.Contract.GetMinStakingPool(&_Guard.CallOpts)
}

// GetValidatorNum is a free data retrieval call binding the contract method 0x1cfe4f0b.
//
// Solidity: function getValidatorNum() constant returns(uint256)
func (_Guard *GuardCaller) GetValidatorNum(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Guard.contract.Call(opts, out, "getValidatorNum")
	return *ret0, err
}

// GetValidatorNum is a free data retrieval call binding the contract method 0x1cfe4f0b.
//
// Solidity: function getValidatorNum() constant returns(uint256)
func (_Guard *GuardSession) GetValidatorNum() (*big.Int, error) {
	return _Guard.Contract.GetValidatorNum(&_Guard.CallOpts)
}

// GetValidatorNum is a free data retrieval call binding the contract method 0x1cfe4f0b.
//
// Solidity: function getValidatorNum() constant returns(uint256)
func (_Guard *GuardCallerSession) GetValidatorNum() (*big.Int, error) {
	return _Guard.Contract.GetValidatorNum(&_Guard.CallOpts)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address _addr) constant returns(bool)
func (_Guard *GuardCaller) IsValidator(opts *bind.CallOpts, _addr common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Guard.contract.Call(opts, out, "isValidator", _addr)
	return *ret0, err
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address _addr) constant returns(bool)
func (_Guard *GuardSession) IsValidator(_addr common.Address) (bool, error) {
	return _Guard.Contract.IsValidator(&_Guard.CallOpts, _addr)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address _addr) constant returns(bool)
func (_Guard *GuardCallerSession) IsValidator(_addr common.Address) (bool, error) {
	return _Guard.Contract.IsValidator(&_Guard.CallOpts, _addr)
}

// MinStakingPool is a free data retrieval call binding the contract method 0x1172037a.
//
// Solidity: function minStakingPool() constant returns(uint256)
func (_Guard *GuardCaller) MinStakingPool(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Guard.contract.Call(opts, out, "minStakingPool")
	return *ret0, err
}

// MinStakingPool is a free data retrieval call binding the contract method 0x1172037a.
//
// Solidity: function minStakingPool() constant returns(uint256)
func (_Guard *GuardSession) MinStakingPool() (*big.Int, error) {
	return _Guard.Contract.MinStakingPool(&_Guard.CallOpts)
}

// MinStakingPool is a free data retrieval call binding the contract method 0x1172037a.
//
// Solidity: function minStakingPool() constant returns(uint256)
func (_Guard *GuardCallerSession) MinStakingPool() (*big.Int, error) {
	return _Guard.Contract.MinStakingPool(&_Guard.CallOpts)
}

// MinValidatorNum is a free data retrieval call binding the contract method 0xea5976a9.
//
// Solidity: function minValidatorNum() constant returns(uint256)
func (_Guard *GuardCaller) MinValidatorNum(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Guard.contract.Call(opts, out, "minValidatorNum")
	return *ret0, err
}

// MinValidatorNum is a free data retrieval call binding the contract method 0xea5976a9.
//
// Solidity: function minValidatorNum() constant returns(uint256)
func (_Guard *GuardSession) MinValidatorNum() (*big.Int, error) {
	return _Guard.Contract.MinValidatorNum(&_Guard.CallOpts)
}

// MinValidatorNum is a free data retrieval call binding the contract method 0xea5976a9.
//
// Solidity: function minValidatorNum() constant returns(uint256)
func (_Guard *GuardCallerSession) MinValidatorNum() (*big.Int, error) {
	return _Guard.Contract.MinValidatorNum(&_Guard.CallOpts)
}

// MiningPool is a free data retrieval call binding the contract method 0x73397597.
//
// Solidity: function miningPool() constant returns(uint256)
func (_Guard *GuardCaller) MiningPool(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Guard.contract.Call(opts, out, "miningPool")
	return *ret0, err
}

// MiningPool is a free data retrieval call binding the contract method 0x73397597.
//
// Solidity: function miningPool() constant returns(uint256)
func (_Guard *GuardSession) MiningPool() (*big.Int, error) {
	return _Guard.Contract.MiningPool(&_Guard.CallOpts)
}

// MiningPool is a free data retrieval call binding the contract method 0x73397597.
//
// Solidity: function miningPool() constant returns(uint256)
func (_Guard *GuardCallerSession) MiningPool() (*big.Int, error) {
	return _Guard.Contract.MiningPool(&_Guard.CallOpts)
}

// RedeemedMiningReward is a free data retrieval call binding the contract method 0x87e53fef.
//
// Solidity: function redeemedMiningReward(address ) constant returns(uint256)
func (_Guard *GuardCaller) RedeemedMiningReward(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Guard.contract.Call(opts, out, "redeemedMiningReward", arg0)
	return *ret0, err
}

// RedeemedMiningReward is a free data retrieval call binding the contract method 0x87e53fef.
//
// Solidity: function redeemedMiningReward(address ) constant returns(uint256)
func (_Guard *GuardSession) RedeemedMiningReward(arg0 common.Address) (*big.Int, error) {
	return _Guard.Contract.RedeemedMiningReward(&_Guard.CallOpts, arg0)
}

// RedeemedMiningReward is a free data retrieval call binding the contract method 0x87e53fef.
//
// Solidity: function redeemedMiningReward(address ) constant returns(uint256)
func (_Guard *GuardCallerSession) RedeemedMiningReward(arg0 common.Address) (*big.Int, error) {
	return _Guard.Contract.RedeemedMiningReward(&_Guard.CallOpts, arg0)
}

// RedeemedServiceReward is a free data retrieval call binding the contract method 0xc57f6661.
//
// Solidity: function redeemedServiceReward(address ) constant returns(uint256)
func (_Guard *GuardCaller) RedeemedServiceReward(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Guard.contract.Call(opts, out, "redeemedServiceReward", arg0)
	return *ret0, err
}

// RedeemedServiceReward is a free data retrieval call binding the contract method 0xc57f6661.
//
// Solidity: function redeemedServiceReward(address ) constant returns(uint256)
func (_Guard *GuardSession) RedeemedServiceReward(arg0 common.Address) (*big.Int, error) {
	return _Guard.Contract.RedeemedServiceReward(&_Guard.CallOpts, arg0)
}

// RedeemedServiceReward is a free data retrieval call binding the contract method 0xc57f6661.
//
// Solidity: function redeemedServiceReward(address ) constant returns(uint256)
func (_Guard *GuardCallerSession) RedeemedServiceReward(arg0 common.Address) (*big.Int, error) {
	return _Guard.Contract.RedeemedServiceReward(&_Guard.CallOpts, arg0)
}

// ServicePool is a free data retrieval call binding the contract method 0xe42a06c8.
//
// Solidity: function servicePool() constant returns(uint256)
func (_Guard *GuardCaller) ServicePool(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Guard.contract.Call(opts, out, "servicePool")
	return *ret0, err
}

// ServicePool is a free data retrieval call binding the contract method 0xe42a06c8.
//
// Solidity: function servicePool() constant returns(uint256)
func (_Guard *GuardSession) ServicePool() (*big.Int, error) {
	return _Guard.Contract.ServicePool(&_Guard.CallOpts)
}

// ServicePool is a free data retrieval call binding the contract method 0xe42a06c8.
//
// Solidity: function servicePool() constant returns(uint256)
func (_Guard *GuardCallerSession) ServicePool() (*big.Int, error) {
	return _Guard.Contract.ServicePool(&_Guard.CallOpts)
}

// SidechainGoLiveTime is a free data retrieval call binding the contract method 0x9ff296ca.
//
// Solidity: function sidechainGoLiveTime() constant returns(uint256)
func (_Guard *GuardCaller) SidechainGoLiveTime(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Guard.contract.Call(opts, out, "sidechainGoLiveTime")
	return *ret0, err
}

// SidechainGoLiveTime is a free data retrieval call binding the contract method 0x9ff296ca.
//
// Solidity: function sidechainGoLiveTime() constant returns(uint256)
func (_Guard *GuardSession) SidechainGoLiveTime() (*big.Int, error) {
	return _Guard.Contract.SidechainGoLiveTime(&_Guard.CallOpts)
}

// SidechainGoLiveTime is a free data retrieval call binding the contract method 0x9ff296ca.
//
// Solidity: function sidechainGoLiveTime() constant returns(uint256)
func (_Guard *GuardCallerSession) SidechainGoLiveTime() (*big.Int, error) {
	return _Guard.Contract.SidechainGoLiveTime(&_Guard.CallOpts)
}

// SubscriptionDeposits is a free data retrieval call binding the contract method 0x1e77733a.
//
// Solidity: function subscriptionDeposits(address ) constant returns(uint256)
func (_Guard *GuardCaller) SubscriptionDeposits(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Guard.contract.Call(opts, out, "subscriptionDeposits", arg0)
	return *ret0, err
}

// SubscriptionDeposits is a free data retrieval call binding the contract method 0x1e77733a.
//
// Solidity: function subscriptionDeposits(address ) constant returns(uint256)
func (_Guard *GuardSession) SubscriptionDeposits(arg0 common.Address) (*big.Int, error) {
	return _Guard.Contract.SubscriptionDeposits(&_Guard.CallOpts, arg0)
}

// SubscriptionDeposits is a free data retrieval call binding the contract method 0x1e77733a.
//
// Solidity: function subscriptionDeposits(address ) constant returns(uint256)
func (_Guard *GuardCallerSession) SubscriptionDeposits(arg0 common.Address) (*big.Int, error) {
	return _Guard.Contract.SubscriptionDeposits(&_Guard.CallOpts, arg0)
}

// UsedPenaltyNonce is a free data retrieval call binding the contract method 0xfb878749.
//
// Solidity: function usedPenaltyNonce(uint256 ) constant returns(bool)
func (_Guard *GuardCaller) UsedPenaltyNonce(opts *bind.CallOpts, arg0 *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Guard.contract.Call(opts, out, "usedPenaltyNonce", arg0)
	return *ret0, err
}

// UsedPenaltyNonce is a free data retrieval call binding the contract method 0xfb878749.
//
// Solidity: function usedPenaltyNonce(uint256 ) constant returns(bool)
func (_Guard *GuardSession) UsedPenaltyNonce(arg0 *big.Int) (bool, error) {
	return _Guard.Contract.UsedPenaltyNonce(&_Guard.CallOpts, arg0)
}

// UsedPenaltyNonce is a free data retrieval call binding the contract method 0xfb878749.
//
// Solidity: function usedPenaltyNonce(uint256 ) constant returns(bool)
func (_Guard *GuardCallerSession) UsedPenaltyNonce(arg0 *big.Int) (bool, error) {
	return _Guard.Contract.UsedPenaltyNonce(&_Guard.CallOpts, arg0)
}

// ValidatorSet is a free data retrieval call binding the contract method 0xe64808f3.
//
// Solidity: function validatorSet(uint256 ) constant returns(address)
func (_Guard *GuardCaller) ValidatorSet(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Guard.contract.Call(opts, out, "validatorSet", arg0)
	return *ret0, err
}

// ValidatorSet is a free data retrieval call binding the contract method 0xe64808f3.
//
// Solidity: function validatorSet(uint256 ) constant returns(address)
func (_Guard *GuardSession) ValidatorSet(arg0 *big.Int) (common.Address, error) {
	return _Guard.Contract.ValidatorSet(&_Guard.CallOpts, arg0)
}

// ValidatorSet is a free data retrieval call binding the contract method 0xe64808f3.
//
// Solidity: function validatorSet(uint256 ) constant returns(address)
func (_Guard *GuardCallerSession) ValidatorSet(arg0 *big.Int) (common.Address, error) {
	return _Guard.Contract.ValidatorSet(&_Guard.CallOpts, arg0)
}

// ClaimValidator is a paid mutator transaction binding the contract method 0x6e7cf85d.
//
// Solidity: function claimValidator() returns()
func (_Guard *GuardTransactor) ClaimValidator(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Guard.contract.Transact(opts, "claimValidator")
}

// ClaimValidator is a paid mutator transaction binding the contract method 0x6e7cf85d.
//
// Solidity: function claimValidator() returns()
func (_Guard *GuardSession) ClaimValidator() (*types.Transaction, error) {
	return _Guard.Contract.ClaimValidator(&_Guard.TransactOpts)
}

// ClaimValidator is a paid mutator transaction binding the contract method 0x6e7cf85d.
//
// Solidity: function claimValidator() returns()
func (_Guard *GuardTransactorSession) ClaimValidator() (*types.Transaction, error) {
	return _Guard.Contract.ClaimValidator(&_Guard.TransactOpts)
}

// ConfirmUnbondedCandidate is a paid mutator transaction binding the contract method 0xc7ec2f35.
//
// Solidity: function confirmUnbondedCandidate(address _candidateAddr) returns()
func (_Guard *GuardTransactor) ConfirmUnbondedCandidate(opts *bind.TransactOpts, _candidateAddr common.Address) (*types.Transaction, error) {
	return _Guard.contract.Transact(opts, "confirmUnbondedCandidate", _candidateAddr)
}

// ConfirmUnbondedCandidate is a paid mutator transaction binding the contract method 0xc7ec2f35.
//
// Solidity: function confirmUnbondedCandidate(address _candidateAddr) returns()
func (_Guard *GuardSession) ConfirmUnbondedCandidate(_candidateAddr common.Address) (*types.Transaction, error) {
	return _Guard.Contract.ConfirmUnbondedCandidate(&_Guard.TransactOpts, _candidateAddr)
}

// ConfirmUnbondedCandidate is a paid mutator transaction binding the contract method 0xc7ec2f35.
//
// Solidity: function confirmUnbondedCandidate(address _candidateAddr) returns()
func (_Guard *GuardTransactorSession) ConfirmUnbondedCandidate(_candidateAddr common.Address) (*types.Transaction, error) {
	return _Guard.Contract.ConfirmUnbondedCandidate(&_Guard.TransactOpts, _candidateAddr)
}

// ConfirmWithdraw is a paid mutator transaction binding the contract method 0xd2bfc1c7.
//
// Solidity: function confirmWithdraw(address _candidateAddr) returns()
func (_Guard *GuardTransactor) ConfirmWithdraw(opts *bind.TransactOpts, _candidateAddr common.Address) (*types.Transaction, error) {
	return _Guard.contract.Transact(opts, "confirmWithdraw", _candidateAddr)
}

// ConfirmWithdraw is a paid mutator transaction binding the contract method 0xd2bfc1c7.
//
// Solidity: function confirmWithdraw(address _candidateAddr) returns()
func (_Guard *GuardSession) ConfirmWithdraw(_candidateAddr common.Address) (*types.Transaction, error) {
	return _Guard.Contract.ConfirmWithdraw(&_Guard.TransactOpts, _candidateAddr)
}

// ConfirmWithdraw is a paid mutator transaction binding the contract method 0xd2bfc1c7.
//
// Solidity: function confirmWithdraw(address _candidateAddr) returns()
func (_Guard *GuardTransactorSession) ConfirmWithdraw(_candidateAddr common.Address) (*types.Transaction, error) {
	return _Guard.Contract.ConfirmWithdraw(&_Guard.TransactOpts, _candidateAddr)
}

// ContributeToMiningPool is a paid mutator transaction binding the contract method 0x4b7dba6b.
//
// Solidity: function contributeToMiningPool(uint256 _amount) returns()
func (_Guard *GuardTransactor) ContributeToMiningPool(opts *bind.TransactOpts, _amount *big.Int) (*types.Transaction, error) {
	return _Guard.contract.Transact(opts, "contributeToMiningPool", _amount)
}

// ContributeToMiningPool is a paid mutator transaction binding the contract method 0x4b7dba6b.
//
// Solidity: function contributeToMiningPool(uint256 _amount) returns()
func (_Guard *GuardSession) ContributeToMiningPool(_amount *big.Int) (*types.Transaction, error) {
	return _Guard.Contract.ContributeToMiningPool(&_Guard.TransactOpts, _amount)
}

// ContributeToMiningPool is a paid mutator transaction binding the contract method 0x4b7dba6b.
//
// Solidity: function contributeToMiningPool(uint256 _amount) returns()
func (_Guard *GuardTransactorSession) ContributeToMiningPool(_amount *big.Int) (*types.Transaction, error) {
	return _Guard.Contract.ContributeToMiningPool(&_Guard.TransactOpts, _amount)
}

// Delegate is a paid mutator transaction binding the contract method 0x026e402b.
//
// Solidity: function delegate(address _candidateAddr, uint256 _amount) returns()
func (_Guard *GuardTransactor) Delegate(opts *bind.TransactOpts, _candidateAddr common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Guard.contract.Transact(opts, "delegate", _candidateAddr, _amount)
}

// Delegate is a paid mutator transaction binding the contract method 0x026e402b.
//
// Solidity: function delegate(address _candidateAddr, uint256 _amount) returns()
func (_Guard *GuardSession) Delegate(_candidateAddr common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Guard.Contract.Delegate(&_Guard.TransactOpts, _candidateAddr, _amount)
}

// Delegate is a paid mutator transaction binding the contract method 0x026e402b.
//
// Solidity: function delegate(address _candidateAddr, uint256 _amount) returns()
func (_Guard *GuardTransactorSession) Delegate(_candidateAddr common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Guard.Contract.Delegate(&_Guard.TransactOpts, _candidateAddr, _amount)
}

// InitializeCandidate is a paid mutator transaction binding the contract method 0x26c36617.
//
// Solidity: function initializeCandidate(uint256 _minSelfStake, bytes _sidechainAddr) returns()
func (_Guard *GuardTransactor) InitializeCandidate(opts *bind.TransactOpts, _minSelfStake *big.Int, _sidechainAddr []byte) (*types.Transaction, error) {
	return _Guard.contract.Transact(opts, "initializeCandidate", _minSelfStake, _sidechainAddr)
}

// InitializeCandidate is a paid mutator transaction binding the contract method 0x26c36617.
//
// Solidity: function initializeCandidate(uint256 _minSelfStake, bytes _sidechainAddr) returns()
func (_Guard *GuardSession) InitializeCandidate(_minSelfStake *big.Int, _sidechainAddr []byte) (*types.Transaction, error) {
	return _Guard.Contract.InitializeCandidate(&_Guard.TransactOpts, _minSelfStake, _sidechainAddr)
}

// InitializeCandidate is a paid mutator transaction binding the contract method 0x26c36617.
//
// Solidity: function initializeCandidate(uint256 _minSelfStake, bytes _sidechainAddr) returns()
func (_Guard *GuardTransactorSession) InitializeCandidate(_minSelfStake *big.Int, _sidechainAddr []byte) (*types.Transaction, error) {
	return _Guard.Contract.InitializeCandidate(&_Guard.TransactOpts, _minSelfStake, _sidechainAddr)
}

// IntendWithdraw is a paid mutator transaction binding the contract method 0x785f8ffd.
//
// Solidity: function intendWithdraw(address _candidateAddr, uint256 _amount) returns()
func (_Guard *GuardTransactor) IntendWithdraw(opts *bind.TransactOpts, _candidateAddr common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Guard.contract.Transact(opts, "intendWithdraw", _candidateAddr, _amount)
}

// IntendWithdraw is a paid mutator transaction binding the contract method 0x785f8ffd.
//
// Solidity: function intendWithdraw(address _candidateAddr, uint256 _amount) returns()
func (_Guard *GuardSession) IntendWithdraw(_candidateAddr common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Guard.Contract.IntendWithdraw(&_Guard.TransactOpts, _candidateAddr, _amount)
}

// IntendWithdraw is a paid mutator transaction binding the contract method 0x785f8ffd.
//
// Solidity: function intendWithdraw(address _candidateAddr, uint256 _amount) returns()
func (_Guard *GuardTransactorSession) IntendWithdraw(_candidateAddr common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Guard.Contract.IntendWithdraw(&_Guard.TransactOpts, _candidateAddr, _amount)
}

// Punish is a paid mutator transaction binding the contract method 0x3620d149.
//
// Solidity: function punish(bytes _penaltyRequest) returns()
func (_Guard *GuardTransactor) Punish(opts *bind.TransactOpts, _penaltyRequest []byte) (*types.Transaction, error) {
	return _Guard.contract.Transact(opts, "punish", _penaltyRequest)
}

// Punish is a paid mutator transaction binding the contract method 0x3620d149.
//
// Solidity: function punish(bytes _penaltyRequest) returns()
func (_Guard *GuardSession) Punish(_penaltyRequest []byte) (*types.Transaction, error) {
	return _Guard.Contract.Punish(&_Guard.TransactOpts, _penaltyRequest)
}

// Punish is a paid mutator transaction binding the contract method 0x3620d149.
//
// Solidity: function punish(bytes _penaltyRequest) returns()
func (_Guard *GuardTransactorSession) Punish(_penaltyRequest []byte) (*types.Transaction, error) {
	return _Guard.Contract.Punish(&_Guard.TransactOpts, _penaltyRequest)
}

// RedeemReward is a paid mutator transaction binding the contract method 0x73a6e450.
//
// Solidity: function redeemReward(bytes _rewardRequest) returns()
func (_Guard *GuardTransactor) RedeemReward(opts *bind.TransactOpts, _rewardRequest []byte) (*types.Transaction, error) {
	return _Guard.contract.Transact(opts, "redeemReward", _rewardRequest)
}

// RedeemReward is a paid mutator transaction binding the contract method 0x73a6e450.
//
// Solidity: function redeemReward(bytes _rewardRequest) returns()
func (_Guard *GuardSession) RedeemReward(_rewardRequest []byte) (*types.Transaction, error) {
	return _Guard.Contract.RedeemReward(&_Guard.TransactOpts, _rewardRequest)
}

// RedeemReward is a paid mutator transaction binding the contract method 0x73a6e450.
//
// Solidity: function redeemReward(bytes _rewardRequest) returns()
func (_Guard *GuardTransactorSession) RedeemReward(_rewardRequest []byte) (*types.Transaction, error) {
	return _Guard.Contract.RedeemReward(&_Guard.TransactOpts, _rewardRequest)
}

// Subscribe is a paid mutator transaction binding the contract method 0x0f574ba7.
//
// Solidity: function subscribe(uint256 _amount) returns()
func (_Guard *GuardTransactor) Subscribe(opts *bind.TransactOpts, _amount *big.Int) (*types.Transaction, error) {
	return _Guard.contract.Transact(opts, "subscribe", _amount)
}

// Subscribe is a paid mutator transaction binding the contract method 0x0f574ba7.
//
// Solidity: function subscribe(uint256 _amount) returns()
func (_Guard *GuardSession) Subscribe(_amount *big.Int) (*types.Transaction, error) {
	return _Guard.Contract.Subscribe(&_Guard.TransactOpts, _amount)
}

// Subscribe is a paid mutator transaction binding the contract method 0x0f574ba7.
//
// Solidity: function subscribe(uint256 _amount) returns()
func (_Guard *GuardTransactorSession) Subscribe(_amount *big.Int) (*types.Transaction, error) {
	return _Guard.Contract.Subscribe(&_Guard.TransactOpts, _amount)
}

// UpdateSidechainAddr is a paid mutator transaction binding the contract method 0xe02f39bd.
//
// Solidity: function updateSidechainAddr(bytes _sidechainAddr) returns()
func (_Guard *GuardTransactor) UpdateSidechainAddr(opts *bind.TransactOpts, _sidechainAddr []byte) (*types.Transaction, error) {
	return _Guard.contract.Transact(opts, "updateSidechainAddr", _sidechainAddr)
}

// UpdateSidechainAddr is a paid mutator transaction binding the contract method 0xe02f39bd.
//
// Solidity: function updateSidechainAddr(bytes _sidechainAddr) returns()
func (_Guard *GuardSession) UpdateSidechainAddr(_sidechainAddr []byte) (*types.Transaction, error) {
	return _Guard.Contract.UpdateSidechainAddr(&_Guard.TransactOpts, _sidechainAddr)
}

// UpdateSidechainAddr is a paid mutator transaction binding the contract method 0xe02f39bd.
//
// Solidity: function updateSidechainAddr(bytes _sidechainAddr) returns()
func (_Guard *GuardTransactorSession) UpdateSidechainAddr(_sidechainAddr []byte) (*types.Transaction, error) {
	return _Guard.Contract.UpdateSidechainAddr(&_Guard.TransactOpts, _sidechainAddr)
}

// WithdrawFromUnbondedCandidate is a paid mutator transaction binding the contract method 0xbb9053d0.
//
// Solidity: function withdrawFromUnbondedCandidate(address _candidateAddr, uint256 _amount) returns()
func (_Guard *GuardTransactor) WithdrawFromUnbondedCandidate(opts *bind.TransactOpts, _candidateAddr common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Guard.contract.Transact(opts, "withdrawFromUnbondedCandidate", _candidateAddr, _amount)
}

// WithdrawFromUnbondedCandidate is a paid mutator transaction binding the contract method 0xbb9053d0.
//
// Solidity: function withdrawFromUnbondedCandidate(address _candidateAddr, uint256 _amount) returns()
func (_Guard *GuardSession) WithdrawFromUnbondedCandidate(_candidateAddr common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Guard.Contract.WithdrawFromUnbondedCandidate(&_Guard.TransactOpts, _candidateAddr, _amount)
}

// WithdrawFromUnbondedCandidate is a paid mutator transaction binding the contract method 0xbb9053d0.
//
// Solidity: function withdrawFromUnbondedCandidate(address _candidateAddr, uint256 _amount) returns()
func (_Guard *GuardTransactorSession) WithdrawFromUnbondedCandidate(_candidateAddr common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Guard.Contract.WithdrawFromUnbondedCandidate(&_Guard.TransactOpts, _candidateAddr, _amount)
}

// GuardAddSubscriptionBalanceIterator is returned from FilterAddSubscriptionBalance and is used to iterate over the raw logs and unpacked data for AddSubscriptionBalance events raised by the Guard contract.
type GuardAddSubscriptionBalanceIterator struct {
	Event *GuardAddSubscriptionBalance // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GuardAddSubscriptionBalanceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GuardAddSubscriptionBalance)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GuardAddSubscriptionBalance)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GuardAddSubscriptionBalanceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GuardAddSubscriptionBalanceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GuardAddSubscriptionBalance represents a AddSubscriptionBalance event raised by the Guard contract.
type GuardAddSubscriptionBalance struct {
	Consumer common.Address
	Amount   *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterAddSubscriptionBalance is a free log retrieval operation binding the contract event 0xac095ced75d400384d8404a37883183a56b937b8ff8195fa0c52c3ccc8bb8a49.
//
// Solidity: event AddSubscriptionBalance(address indexed consumer, uint256 amount)
func (_Guard *GuardFilterer) FilterAddSubscriptionBalance(opts *bind.FilterOpts, consumer []common.Address) (*GuardAddSubscriptionBalanceIterator, error) {

	var consumerRule []interface{}
	for _, consumerItem := range consumer {
		consumerRule = append(consumerRule, consumerItem)
	}

	logs, sub, err := _Guard.contract.FilterLogs(opts, "AddSubscriptionBalance", consumerRule)
	if err != nil {
		return nil, err
	}
	return &GuardAddSubscriptionBalanceIterator{contract: _Guard.contract, event: "AddSubscriptionBalance", logs: logs, sub: sub}, nil
}

// WatchAddSubscriptionBalance is a free log subscription operation binding the contract event 0xac095ced75d400384d8404a37883183a56b937b8ff8195fa0c52c3ccc8bb8a49.
//
// Solidity: event AddSubscriptionBalance(address indexed consumer, uint256 amount)
func (_Guard *GuardFilterer) WatchAddSubscriptionBalance(opts *bind.WatchOpts, sink chan<- *GuardAddSubscriptionBalance, consumer []common.Address) (event.Subscription, error) {

	var consumerRule []interface{}
	for _, consumerItem := range consumer {
		consumerRule = append(consumerRule, consumerItem)
	}

	logs, sub, err := _Guard.contract.WatchLogs(opts, "AddSubscriptionBalance", consumerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GuardAddSubscriptionBalance)
				if err := _Guard.contract.UnpackLog(event, "AddSubscriptionBalance", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddSubscriptionBalance is a log parse operation binding the contract event 0xac095ced75d400384d8404a37883183a56b937b8ff8195fa0c52c3ccc8bb8a49.
//
// Solidity: event AddSubscriptionBalance(address indexed consumer, uint256 amount)
func (_Guard *GuardFilterer) ParseAddSubscriptionBalance(log types.Log) (*GuardAddSubscriptionBalance, error) {
	event := new(GuardAddSubscriptionBalance)
	if err := _Guard.contract.UnpackLog(event, "AddSubscriptionBalance", log); err != nil {
		return nil, err
	}
	return event, nil
}

// GuardCandidateUnbondedIterator is returned from FilterCandidateUnbonded and is used to iterate over the raw logs and unpacked data for CandidateUnbonded events raised by the Guard contract.
type GuardCandidateUnbondedIterator struct {
	Event *GuardCandidateUnbonded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GuardCandidateUnbondedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GuardCandidateUnbonded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GuardCandidateUnbonded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GuardCandidateUnbondedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GuardCandidateUnbondedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GuardCandidateUnbonded represents a CandidateUnbonded event raised by the Guard contract.
type GuardCandidateUnbonded struct {
	Candidate common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterCandidateUnbonded is a free log retrieval operation binding the contract event 0xbe85a9a7aa606febeaa35606e49cd7324c63cf970f4f5fd0c7e983f42b20b219.
//
// Solidity: event CandidateUnbonded(address indexed candidate)
func (_Guard *GuardFilterer) FilterCandidateUnbonded(opts *bind.FilterOpts, candidate []common.Address) (*GuardCandidateUnbondedIterator, error) {

	var candidateRule []interface{}
	for _, candidateItem := range candidate {
		candidateRule = append(candidateRule, candidateItem)
	}

	logs, sub, err := _Guard.contract.FilterLogs(opts, "CandidateUnbonded", candidateRule)
	if err != nil {
		return nil, err
	}
	return &GuardCandidateUnbondedIterator{contract: _Guard.contract, event: "CandidateUnbonded", logs: logs, sub: sub}, nil
}

// WatchCandidateUnbonded is a free log subscription operation binding the contract event 0xbe85a9a7aa606febeaa35606e49cd7324c63cf970f4f5fd0c7e983f42b20b219.
//
// Solidity: event CandidateUnbonded(address indexed candidate)
func (_Guard *GuardFilterer) WatchCandidateUnbonded(opts *bind.WatchOpts, sink chan<- *GuardCandidateUnbonded, candidate []common.Address) (event.Subscription, error) {

	var candidateRule []interface{}
	for _, candidateItem := range candidate {
		candidateRule = append(candidateRule, candidateItem)
	}

	logs, sub, err := _Guard.contract.WatchLogs(opts, "CandidateUnbonded", candidateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GuardCandidateUnbonded)
				if err := _Guard.contract.UnpackLog(event, "CandidateUnbonded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCandidateUnbonded is a log parse operation binding the contract event 0xbe85a9a7aa606febeaa35606e49cd7324c63cf970f4f5fd0c7e983f42b20b219.
//
// Solidity: event CandidateUnbonded(address indexed candidate)
func (_Guard *GuardFilterer) ParseCandidateUnbonded(log types.Log) (*GuardCandidateUnbonded, error) {
	event := new(GuardCandidateUnbonded)
	if err := _Guard.contract.UnpackLog(event, "CandidateUnbonded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// GuardConfirmWithdrawIterator is returned from FilterConfirmWithdraw and is used to iterate over the raw logs and unpacked data for ConfirmWithdraw events raised by the Guard contract.
type GuardConfirmWithdrawIterator struct {
	Event *GuardConfirmWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GuardConfirmWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GuardConfirmWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GuardConfirmWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GuardConfirmWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GuardConfirmWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GuardConfirmWithdraw represents a ConfirmWithdraw event raised by the Guard contract.
type GuardConfirmWithdraw struct {
	Delegator common.Address
	Candidate common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterConfirmWithdraw is a free log retrieval operation binding the contract event 0x08d0283ea9a2e520a2f09611cf37ca6eb70f62e9a807e53756047dd2dc027220.
//
// Solidity: event ConfirmWithdraw(address indexed delegator, address indexed candidate, uint256 amount)
func (_Guard *GuardFilterer) FilterConfirmWithdraw(opts *bind.FilterOpts, delegator []common.Address, candidate []common.Address) (*GuardConfirmWithdrawIterator, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var candidateRule []interface{}
	for _, candidateItem := range candidate {
		candidateRule = append(candidateRule, candidateItem)
	}

	logs, sub, err := _Guard.contract.FilterLogs(opts, "ConfirmWithdraw", delegatorRule, candidateRule)
	if err != nil {
		return nil, err
	}
	return &GuardConfirmWithdrawIterator{contract: _Guard.contract, event: "ConfirmWithdraw", logs: logs, sub: sub}, nil
}

// WatchConfirmWithdraw is a free log subscription operation binding the contract event 0x08d0283ea9a2e520a2f09611cf37ca6eb70f62e9a807e53756047dd2dc027220.
//
// Solidity: event ConfirmWithdraw(address indexed delegator, address indexed candidate, uint256 amount)
func (_Guard *GuardFilterer) WatchConfirmWithdraw(opts *bind.WatchOpts, sink chan<- *GuardConfirmWithdraw, delegator []common.Address, candidate []common.Address) (event.Subscription, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var candidateRule []interface{}
	for _, candidateItem := range candidate {
		candidateRule = append(candidateRule, candidateItem)
	}

	logs, sub, err := _Guard.contract.WatchLogs(opts, "ConfirmWithdraw", delegatorRule, candidateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GuardConfirmWithdraw)
				if err := _Guard.contract.UnpackLog(event, "ConfirmWithdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConfirmWithdraw is a log parse operation binding the contract event 0x08d0283ea9a2e520a2f09611cf37ca6eb70f62e9a807e53756047dd2dc027220.
//
// Solidity: event ConfirmWithdraw(address indexed delegator, address indexed candidate, uint256 amount)
func (_Guard *GuardFilterer) ParseConfirmWithdraw(log types.Log) (*GuardConfirmWithdraw, error) {
	event := new(GuardConfirmWithdraw)
	if err := _Guard.contract.UnpackLog(event, "ConfirmWithdraw", log); err != nil {
		return nil, err
	}
	return event, nil
}

// GuardDelegateIterator is returned from FilterDelegate and is used to iterate over the raw logs and unpacked data for Delegate events raised by the Guard contract.
type GuardDelegateIterator struct {
	Event *GuardDelegate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GuardDelegateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GuardDelegate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GuardDelegate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GuardDelegateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GuardDelegateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GuardDelegate represents a Delegate event raised by the Guard contract.
type GuardDelegate struct {
	Delegator   common.Address
	Candidate   common.Address
	NewStake    *big.Int
	StakingPool *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterDelegate is a free log retrieval operation binding the contract event 0x500599802164a08023e87ffc3eed0ba3ae60697b3083ba81d046683679d81c6b.
//
// Solidity: event Delegate(address indexed delegator, address indexed candidate, uint256 newStake, uint256 stakingPool)
func (_Guard *GuardFilterer) FilterDelegate(opts *bind.FilterOpts, delegator []common.Address, candidate []common.Address) (*GuardDelegateIterator, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var candidateRule []interface{}
	for _, candidateItem := range candidate {
		candidateRule = append(candidateRule, candidateItem)
	}

	logs, sub, err := _Guard.contract.FilterLogs(opts, "Delegate", delegatorRule, candidateRule)
	if err != nil {
		return nil, err
	}
	return &GuardDelegateIterator{contract: _Guard.contract, event: "Delegate", logs: logs, sub: sub}, nil
}

// WatchDelegate is a free log subscription operation binding the contract event 0x500599802164a08023e87ffc3eed0ba3ae60697b3083ba81d046683679d81c6b.
//
// Solidity: event Delegate(address indexed delegator, address indexed candidate, uint256 newStake, uint256 stakingPool)
func (_Guard *GuardFilterer) WatchDelegate(opts *bind.WatchOpts, sink chan<- *GuardDelegate, delegator []common.Address, candidate []common.Address) (event.Subscription, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var candidateRule []interface{}
	for _, candidateItem := range candidate {
		candidateRule = append(candidateRule, candidateItem)
	}

	logs, sub, err := _Guard.contract.WatchLogs(opts, "Delegate", delegatorRule, candidateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GuardDelegate)
				if err := _Guard.contract.UnpackLog(event, "Delegate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegate is a log parse operation binding the contract event 0x500599802164a08023e87ffc3eed0ba3ae60697b3083ba81d046683679d81c6b.
//
// Solidity: event Delegate(address indexed delegator, address indexed candidate, uint256 newStake, uint256 stakingPool)
func (_Guard *GuardFilterer) ParseDelegate(log types.Log) (*GuardDelegate, error) {
	event := new(GuardDelegate)
	if err := _Guard.contract.UnpackLog(event, "Delegate", log); err != nil {
		return nil, err
	}
	return event, nil
}

// GuardIndemnifyIterator is returned from FilterIndemnify and is used to iterate over the raw logs and unpacked data for Indemnify events raised by the Guard contract.
type GuardIndemnifyIterator struct {
	Event *GuardIndemnify // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GuardIndemnifyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GuardIndemnify)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GuardIndemnify)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GuardIndemnifyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GuardIndemnifyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GuardIndemnify represents a Indemnify event raised by the Guard contract.
type GuardIndemnify struct {
	Indemnitee common.Address
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterIndemnify is a free log retrieval operation binding the contract event 0x5739ab1e78cc400665fe049852d266e9ac5995451b5e666b25f3c30b19087d8e.
//
// Solidity: event Indemnify(address indexed indemnitee, uint256 amount)
func (_Guard *GuardFilterer) FilterIndemnify(opts *bind.FilterOpts, indemnitee []common.Address) (*GuardIndemnifyIterator, error) {

	var indemniteeRule []interface{}
	for _, indemniteeItem := range indemnitee {
		indemniteeRule = append(indemniteeRule, indemniteeItem)
	}

	logs, sub, err := _Guard.contract.FilterLogs(opts, "Indemnify", indemniteeRule)
	if err != nil {
		return nil, err
	}
	return &GuardIndemnifyIterator{contract: _Guard.contract, event: "Indemnify", logs: logs, sub: sub}, nil
}

// WatchIndemnify is a free log subscription operation binding the contract event 0x5739ab1e78cc400665fe049852d266e9ac5995451b5e666b25f3c30b19087d8e.
//
// Solidity: event Indemnify(address indexed indemnitee, uint256 amount)
func (_Guard *GuardFilterer) WatchIndemnify(opts *bind.WatchOpts, sink chan<- *GuardIndemnify, indemnitee []common.Address) (event.Subscription, error) {

	var indemniteeRule []interface{}
	for _, indemniteeItem := range indemnitee {
		indemniteeRule = append(indemniteeRule, indemniteeItem)
	}

	logs, sub, err := _Guard.contract.WatchLogs(opts, "Indemnify", indemniteeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GuardIndemnify)
				if err := _Guard.contract.UnpackLog(event, "Indemnify", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseIndemnify is a log parse operation binding the contract event 0x5739ab1e78cc400665fe049852d266e9ac5995451b5e666b25f3c30b19087d8e.
//
// Solidity: event Indemnify(address indexed indemnitee, uint256 amount)
func (_Guard *GuardFilterer) ParseIndemnify(log types.Log) (*GuardIndemnify, error) {
	event := new(GuardIndemnify)
	if err := _Guard.contract.UnpackLog(event, "Indemnify", log); err != nil {
		return nil, err
	}
	return event, nil
}

// GuardInitializeCandidateIterator is returned from FilterInitializeCandidate and is used to iterate over the raw logs and unpacked data for InitializeCandidate events raised by the Guard contract.
type GuardInitializeCandidateIterator struct {
	Event *GuardInitializeCandidate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GuardInitializeCandidateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GuardInitializeCandidate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GuardInitializeCandidate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GuardInitializeCandidateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GuardInitializeCandidateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GuardInitializeCandidate represents a InitializeCandidate event raised by the Guard contract.
type GuardInitializeCandidate struct {
	Candidate     common.Address
	MinSelfStake  *big.Int
	SidechainAddr common.Hash
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterInitializeCandidate is a free log retrieval operation binding the contract event 0x377f6597c5132797119197fab0e953f73fd5bb109a897a11c871834af2d092a9.
//
// Solidity: event InitializeCandidate(address indexed candidate, uint256 minSelfStake, bytes indexed sidechainAddr)
func (_Guard *GuardFilterer) FilterInitializeCandidate(opts *bind.FilterOpts, candidate []common.Address, sidechainAddr [][]byte) (*GuardInitializeCandidateIterator, error) {

	var candidateRule []interface{}
	for _, candidateItem := range candidate {
		candidateRule = append(candidateRule, candidateItem)
	}

	var sidechainAddrRule []interface{}
	for _, sidechainAddrItem := range sidechainAddr {
		sidechainAddrRule = append(sidechainAddrRule, sidechainAddrItem)
	}

	logs, sub, err := _Guard.contract.FilterLogs(opts, "InitializeCandidate", candidateRule, sidechainAddrRule)
	if err != nil {
		return nil, err
	}
	return &GuardInitializeCandidateIterator{contract: _Guard.contract, event: "InitializeCandidate", logs: logs, sub: sub}, nil
}

// WatchInitializeCandidate is a free log subscription operation binding the contract event 0x377f6597c5132797119197fab0e953f73fd5bb109a897a11c871834af2d092a9.
//
// Solidity: event InitializeCandidate(address indexed candidate, uint256 minSelfStake, bytes indexed sidechainAddr)
func (_Guard *GuardFilterer) WatchInitializeCandidate(opts *bind.WatchOpts, sink chan<- *GuardInitializeCandidate, candidate []common.Address, sidechainAddr [][]byte) (event.Subscription, error) {

	var candidateRule []interface{}
	for _, candidateItem := range candidate {
		candidateRule = append(candidateRule, candidateItem)
	}

	var sidechainAddrRule []interface{}
	for _, sidechainAddrItem := range sidechainAddr {
		sidechainAddrRule = append(sidechainAddrRule, sidechainAddrItem)
	}

	logs, sub, err := _Guard.contract.WatchLogs(opts, "InitializeCandidate", candidateRule, sidechainAddrRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GuardInitializeCandidate)
				if err := _Guard.contract.UnpackLog(event, "InitializeCandidate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitializeCandidate is a log parse operation binding the contract event 0x377f6597c5132797119197fab0e953f73fd5bb109a897a11c871834af2d092a9.
//
// Solidity: event InitializeCandidate(address indexed candidate, uint256 minSelfStake, bytes indexed sidechainAddr)
func (_Guard *GuardFilterer) ParseInitializeCandidate(log types.Log) (*GuardInitializeCandidate, error) {
	event := new(GuardInitializeCandidate)
	if err := _Guard.contract.UnpackLog(event, "InitializeCandidate", log); err != nil {
		return nil, err
	}
	return event, nil
}

// GuardIntendWithdrawIterator is returned from FilterIntendWithdraw and is used to iterate over the raw logs and unpacked data for IntendWithdraw events raised by the Guard contract.
type GuardIntendWithdrawIterator struct {
	Event *GuardIntendWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GuardIntendWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GuardIntendWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GuardIntendWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GuardIntendWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GuardIntendWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GuardIntendWithdraw represents a IntendWithdraw event raised by the Guard contract.
type GuardIntendWithdraw struct {
	Delegator      common.Address
	Candidate      common.Address
	WithdrawAmount *big.Int
	IntendTime     *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterIntendWithdraw is a free log retrieval operation binding the contract event 0x7171946bb2a9ef55fcb2eb8cef679db45e2e3a8cef9a44567d34d202b65ff0b1.
//
// Solidity: event IntendWithdraw(address indexed delegator, address indexed candidate, uint256 withdrawAmount, uint256 intendTime)
func (_Guard *GuardFilterer) FilterIntendWithdraw(opts *bind.FilterOpts, delegator []common.Address, candidate []common.Address) (*GuardIntendWithdrawIterator, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var candidateRule []interface{}
	for _, candidateItem := range candidate {
		candidateRule = append(candidateRule, candidateItem)
	}

	logs, sub, err := _Guard.contract.FilterLogs(opts, "IntendWithdraw", delegatorRule, candidateRule)
	if err != nil {
		return nil, err
	}
	return &GuardIntendWithdrawIterator{contract: _Guard.contract, event: "IntendWithdraw", logs: logs, sub: sub}, nil
}

// WatchIntendWithdraw is a free log subscription operation binding the contract event 0x7171946bb2a9ef55fcb2eb8cef679db45e2e3a8cef9a44567d34d202b65ff0b1.
//
// Solidity: event IntendWithdraw(address indexed delegator, address indexed candidate, uint256 withdrawAmount, uint256 intendTime)
func (_Guard *GuardFilterer) WatchIntendWithdraw(opts *bind.WatchOpts, sink chan<- *GuardIntendWithdraw, delegator []common.Address, candidate []common.Address) (event.Subscription, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var candidateRule []interface{}
	for _, candidateItem := range candidate {
		candidateRule = append(candidateRule, candidateItem)
	}

	logs, sub, err := _Guard.contract.WatchLogs(opts, "IntendWithdraw", delegatorRule, candidateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GuardIntendWithdraw)
				if err := _Guard.contract.UnpackLog(event, "IntendWithdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseIntendWithdraw is a log parse operation binding the contract event 0x7171946bb2a9ef55fcb2eb8cef679db45e2e3a8cef9a44567d34d202b65ff0b1.
//
// Solidity: event IntendWithdraw(address indexed delegator, address indexed candidate, uint256 withdrawAmount, uint256 intendTime)
func (_Guard *GuardFilterer) ParseIntendWithdraw(log types.Log) (*GuardIntendWithdraw, error) {
	event := new(GuardIntendWithdraw)
	if err := _Guard.contract.UnpackLog(event, "IntendWithdraw", log); err != nil {
		return nil, err
	}
	return event, nil
}

// GuardMiningPoolContributionIterator is returned from FilterMiningPoolContribution and is used to iterate over the raw logs and unpacked data for MiningPoolContribution events raised by the Guard contract.
type GuardMiningPoolContributionIterator struct {
	Event *GuardMiningPoolContribution // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GuardMiningPoolContributionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GuardMiningPoolContribution)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GuardMiningPoolContribution)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GuardMiningPoolContributionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GuardMiningPoolContributionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GuardMiningPoolContribution represents a MiningPoolContribution event raised by the Guard contract.
type GuardMiningPoolContribution struct {
	Contributor    common.Address
	Contribution   *big.Int
	MiningPoolSize *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterMiningPoolContribution is a free log retrieval operation binding the contract event 0x97e19c4040b6c46d4275e0c4fea68f8f92c81138372ffdb089932c211938f765.
//
// Solidity: event MiningPoolContribution(address indexed contributor, uint256 contribution, uint256 miningPoolSize)
func (_Guard *GuardFilterer) FilterMiningPoolContribution(opts *bind.FilterOpts, contributor []common.Address) (*GuardMiningPoolContributionIterator, error) {

	var contributorRule []interface{}
	for _, contributorItem := range contributor {
		contributorRule = append(contributorRule, contributorItem)
	}

	logs, sub, err := _Guard.contract.FilterLogs(opts, "MiningPoolContribution", contributorRule)
	if err != nil {
		return nil, err
	}
	return &GuardMiningPoolContributionIterator{contract: _Guard.contract, event: "MiningPoolContribution", logs: logs, sub: sub}, nil
}

// WatchMiningPoolContribution is a free log subscription operation binding the contract event 0x97e19c4040b6c46d4275e0c4fea68f8f92c81138372ffdb089932c211938f765.
//
// Solidity: event MiningPoolContribution(address indexed contributor, uint256 contribution, uint256 miningPoolSize)
func (_Guard *GuardFilterer) WatchMiningPoolContribution(opts *bind.WatchOpts, sink chan<- *GuardMiningPoolContribution, contributor []common.Address) (event.Subscription, error) {

	var contributorRule []interface{}
	for _, contributorItem := range contributor {
		contributorRule = append(contributorRule, contributorItem)
	}

	logs, sub, err := _Guard.contract.WatchLogs(opts, "MiningPoolContribution", contributorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GuardMiningPoolContribution)
				if err := _Guard.contract.UnpackLog(event, "MiningPoolContribution", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMiningPoolContribution is a log parse operation binding the contract event 0x97e19c4040b6c46d4275e0c4fea68f8f92c81138372ffdb089932c211938f765.
//
// Solidity: event MiningPoolContribution(address indexed contributor, uint256 contribution, uint256 miningPoolSize)
func (_Guard *GuardFilterer) ParseMiningPoolContribution(log types.Log) (*GuardMiningPoolContribution, error) {
	event := new(GuardMiningPoolContribution)
	if err := _Guard.contract.UnpackLog(event, "MiningPoolContribution", log); err != nil {
		return nil, err
	}
	return event, nil
}

// GuardPunishIterator is returned from FilterPunish and is used to iterate over the raw logs and unpacked data for Punish events raised by the Guard contract.
type GuardPunishIterator struct {
	Event *GuardPunish // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GuardPunishIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GuardPunish)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GuardPunish)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GuardPunishIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GuardPunishIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GuardPunish represents a Punish event raised by the Guard contract.
type GuardPunish struct {
	Validator common.Address
	Delegator common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterPunish is a free log retrieval operation binding the contract event 0x111897aba775ed4cb659e35805c453dcd8f0024cc414f560f9677bdfae30952a.
//
// Solidity: event Punish(address indexed validator, address indexed delegator, uint256 amount)
func (_Guard *GuardFilterer) FilterPunish(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*GuardPunishIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _Guard.contract.FilterLogs(opts, "Punish", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return &GuardPunishIterator{contract: _Guard.contract, event: "Punish", logs: logs, sub: sub}, nil
}

// WatchPunish is a free log subscription operation binding the contract event 0x111897aba775ed4cb659e35805c453dcd8f0024cc414f560f9677bdfae30952a.
//
// Solidity: event Punish(address indexed validator, address indexed delegator, uint256 amount)
func (_Guard *GuardFilterer) WatchPunish(opts *bind.WatchOpts, sink chan<- *GuardPunish, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _Guard.contract.WatchLogs(opts, "Punish", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GuardPunish)
				if err := _Guard.contract.UnpackLog(event, "Punish", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePunish is a log parse operation binding the contract event 0x111897aba775ed4cb659e35805c453dcd8f0024cc414f560f9677bdfae30952a.
//
// Solidity: event Punish(address indexed validator, address indexed delegator, uint256 amount)
func (_Guard *GuardFilterer) ParsePunish(log types.Log) (*GuardPunish, error) {
	event := new(GuardPunish)
	if err := _Guard.contract.UnpackLog(event, "Punish", log); err != nil {
		return nil, err
	}
	return event, nil
}

// GuardRedeemRewardIterator is returned from FilterRedeemReward and is used to iterate over the raw logs and unpacked data for RedeemReward events raised by the Guard contract.
type GuardRedeemRewardIterator struct {
	Event *GuardRedeemReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GuardRedeemRewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GuardRedeemReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GuardRedeemReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GuardRedeemRewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GuardRedeemRewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GuardRedeemReward represents a RedeemReward event raised by the Guard contract.
type GuardRedeemReward struct {
	Receiver      common.Address
	MiningReward  *big.Int
	ServiceReward *big.Int
	MiningPool    *big.Int
	ServicePool   *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterRedeemReward is a free log retrieval operation binding the contract event 0x960a5cc298ffb55e7c3f1b994053dcf9298367b34bf7699d94368be331558b2e.
//
// Solidity: event RedeemReward(address indexed receiver, uint256 miningReward, uint256 serviceReward, uint256 miningPool, uint256 servicePool)
func (_Guard *GuardFilterer) FilterRedeemReward(opts *bind.FilterOpts, receiver []common.Address) (*GuardRedeemRewardIterator, error) {

	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}

	logs, sub, err := _Guard.contract.FilterLogs(opts, "RedeemReward", receiverRule)
	if err != nil {
		return nil, err
	}
	return &GuardRedeemRewardIterator{contract: _Guard.contract, event: "RedeemReward", logs: logs, sub: sub}, nil
}

// WatchRedeemReward is a free log subscription operation binding the contract event 0x960a5cc298ffb55e7c3f1b994053dcf9298367b34bf7699d94368be331558b2e.
//
// Solidity: event RedeemReward(address indexed receiver, uint256 miningReward, uint256 serviceReward, uint256 miningPool, uint256 servicePool)
func (_Guard *GuardFilterer) WatchRedeemReward(opts *bind.WatchOpts, sink chan<- *GuardRedeemReward, receiver []common.Address) (event.Subscription, error) {

	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}

	logs, sub, err := _Guard.contract.WatchLogs(opts, "RedeemReward", receiverRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GuardRedeemReward)
				if err := _Guard.contract.UnpackLog(event, "RedeemReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedeemReward is a log parse operation binding the contract event 0x960a5cc298ffb55e7c3f1b994053dcf9298367b34bf7699d94368be331558b2e.
//
// Solidity: event RedeemReward(address indexed receiver, uint256 miningReward, uint256 serviceReward, uint256 miningPool, uint256 servicePool)
func (_Guard *GuardFilterer) ParseRedeemReward(log types.Log) (*GuardRedeemReward, error) {
	event := new(GuardRedeemReward)
	if err := _Guard.contract.UnpackLog(event, "RedeemReward", log); err != nil {
		return nil, err
	}
	return event, nil
}

// GuardUpdateSidechainAddrIterator is returned from FilterUpdateSidechainAddr and is used to iterate over the raw logs and unpacked data for UpdateSidechainAddr events raised by the Guard contract.
type GuardUpdateSidechainAddrIterator struct {
	Event *GuardUpdateSidechainAddr // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GuardUpdateSidechainAddrIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GuardUpdateSidechainAddr)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GuardUpdateSidechainAddr)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GuardUpdateSidechainAddrIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GuardUpdateSidechainAddrIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GuardUpdateSidechainAddr represents a UpdateSidechainAddr event raised by the Guard contract.
type GuardUpdateSidechainAddr struct {
	Candidate        common.Address
	OldSidechainAddr common.Hash
	NewSidechainAddr common.Hash
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterUpdateSidechainAddr is a free log retrieval operation binding the contract event 0x16de3299ab034ce7e21b22d55f4f9a1474bd3c4d20dbd1cc9bcd39c1ad3d5a2c.
//
// Solidity: event UpdateSidechainAddr(address indexed candidate, bytes indexed oldSidechainAddr, bytes indexed newSidechainAddr)
func (_Guard *GuardFilterer) FilterUpdateSidechainAddr(opts *bind.FilterOpts, candidate []common.Address, oldSidechainAddr [][]byte, newSidechainAddr [][]byte) (*GuardUpdateSidechainAddrIterator, error) {

	var candidateRule []interface{}
	for _, candidateItem := range candidate {
		candidateRule = append(candidateRule, candidateItem)
	}
	var oldSidechainAddrRule []interface{}
	for _, oldSidechainAddrItem := range oldSidechainAddr {
		oldSidechainAddrRule = append(oldSidechainAddrRule, oldSidechainAddrItem)
	}
	var newSidechainAddrRule []interface{}
	for _, newSidechainAddrItem := range newSidechainAddr {
		newSidechainAddrRule = append(newSidechainAddrRule, newSidechainAddrItem)
	}

	logs, sub, err := _Guard.contract.FilterLogs(opts, "UpdateSidechainAddr", candidateRule, oldSidechainAddrRule, newSidechainAddrRule)
	if err != nil {
		return nil, err
	}
	return &GuardUpdateSidechainAddrIterator{contract: _Guard.contract, event: "UpdateSidechainAddr", logs: logs, sub: sub}, nil
}

// WatchUpdateSidechainAddr is a free log subscription operation binding the contract event 0x16de3299ab034ce7e21b22d55f4f9a1474bd3c4d20dbd1cc9bcd39c1ad3d5a2c.
//
// Solidity: event UpdateSidechainAddr(address indexed candidate, bytes indexed oldSidechainAddr, bytes indexed newSidechainAddr)
func (_Guard *GuardFilterer) WatchUpdateSidechainAddr(opts *bind.WatchOpts, sink chan<- *GuardUpdateSidechainAddr, candidate []common.Address, oldSidechainAddr [][]byte, newSidechainAddr [][]byte) (event.Subscription, error) {

	var candidateRule []interface{}
	for _, candidateItem := range candidate {
		candidateRule = append(candidateRule, candidateItem)
	}
	var oldSidechainAddrRule []interface{}
	for _, oldSidechainAddrItem := range oldSidechainAddr {
		oldSidechainAddrRule = append(oldSidechainAddrRule, oldSidechainAddrItem)
	}
	var newSidechainAddrRule []interface{}
	for _, newSidechainAddrItem := range newSidechainAddr {
		newSidechainAddrRule = append(newSidechainAddrRule, newSidechainAddrItem)
	}

	logs, sub, err := _Guard.contract.WatchLogs(opts, "UpdateSidechainAddr", candidateRule, oldSidechainAddrRule, newSidechainAddrRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GuardUpdateSidechainAddr)
				if err := _Guard.contract.UnpackLog(event, "UpdateSidechainAddr", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateSidechainAddr is a log parse operation binding the contract event 0x16de3299ab034ce7e21b22d55f4f9a1474bd3c4d20dbd1cc9bcd39c1ad3d5a2c.
//
// Solidity: event UpdateSidechainAddr(address indexed candidate, bytes indexed oldSidechainAddr, bytes indexed newSidechainAddr)
func (_Guard *GuardFilterer) ParseUpdateSidechainAddr(log types.Log) (*GuardUpdateSidechainAddr, error) {
	event := new(GuardUpdateSidechainAddr)
	if err := _Guard.contract.UnpackLog(event, "UpdateSidechainAddr", log); err != nil {
		return nil, err
	}
	return event, nil
}

// GuardValidatorChangeIterator is returned from FilterValidatorChange and is used to iterate over the raw logs and unpacked data for ValidatorChange events raised by the Guard contract.
type GuardValidatorChangeIterator struct {
	Event *GuardValidatorChange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GuardValidatorChangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GuardValidatorChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GuardValidatorChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GuardValidatorChangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GuardValidatorChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GuardValidatorChange represents a ValidatorChange event raised by the Guard contract.
type GuardValidatorChange struct {
	EthAddr    common.Address
	ChangeType uint8
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterValidatorChange is a free log retrieval operation binding the contract event 0x63f783ba869265648de5e70add96be9f4914e3bde064fdc19fd7e6a8ebf2f46c.
//
// Solidity: event ValidatorChange(address indexed ethAddr, uint8 indexed changeType)
func (_Guard *GuardFilterer) FilterValidatorChange(opts *bind.FilterOpts, ethAddr []common.Address, changeType []uint8) (*GuardValidatorChangeIterator, error) {

	var ethAddrRule []interface{}
	for _, ethAddrItem := range ethAddr {
		ethAddrRule = append(ethAddrRule, ethAddrItem)
	}
	var changeTypeRule []interface{}
	for _, changeTypeItem := range changeType {
		changeTypeRule = append(changeTypeRule, changeTypeItem)
	}

	logs, sub, err := _Guard.contract.FilterLogs(opts, "ValidatorChange", ethAddrRule, changeTypeRule)
	if err != nil {
		return nil, err
	}
	return &GuardValidatorChangeIterator{contract: _Guard.contract, event: "ValidatorChange", logs: logs, sub: sub}, nil
}

// WatchValidatorChange is a free log subscription operation binding the contract event 0x63f783ba869265648de5e70add96be9f4914e3bde064fdc19fd7e6a8ebf2f46c.
//
// Solidity: event ValidatorChange(address indexed ethAddr, uint8 indexed changeType)
func (_Guard *GuardFilterer) WatchValidatorChange(opts *bind.WatchOpts, sink chan<- *GuardValidatorChange, ethAddr []common.Address, changeType []uint8) (event.Subscription, error) {

	var ethAddrRule []interface{}
	for _, ethAddrItem := range ethAddr {
		ethAddrRule = append(ethAddrRule, ethAddrItem)
	}
	var changeTypeRule []interface{}
	for _, changeTypeItem := range changeType {
		changeTypeRule = append(changeTypeRule, changeTypeItem)
	}

	logs, sub, err := _Guard.contract.WatchLogs(opts, "ValidatorChange", ethAddrRule, changeTypeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GuardValidatorChange)
				if err := _Guard.contract.UnpackLog(event, "ValidatorChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorChange is a log parse operation binding the contract event 0x63f783ba869265648de5e70add96be9f4914e3bde064fdc19fd7e6a8ebf2f46c.
//
// Solidity: event ValidatorChange(address indexed ethAddr, uint8 indexed changeType)
func (_Guard *GuardFilterer) ParseValidatorChange(log types.Log) (*GuardValidatorChange, error) {
	event := new(GuardValidatorChange)
	if err := _Guard.contract.UnpackLog(event, "ValidatorChange", log); err != nil {
		return nil, err
	}
	return event, nil
}

// GuardWithdrawFromUnbondedCandidateIterator is returned from FilterWithdrawFromUnbondedCandidate and is used to iterate over the raw logs and unpacked data for WithdrawFromUnbondedCandidate events raised by the Guard contract.
type GuardWithdrawFromUnbondedCandidateIterator struct {
	Event *GuardWithdrawFromUnbondedCandidate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GuardWithdrawFromUnbondedCandidateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GuardWithdrawFromUnbondedCandidate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GuardWithdrawFromUnbondedCandidate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GuardWithdrawFromUnbondedCandidateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GuardWithdrawFromUnbondedCandidateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GuardWithdrawFromUnbondedCandidate represents a WithdrawFromUnbondedCandidate event raised by the Guard contract.
type GuardWithdrawFromUnbondedCandidate struct {
	Delegator common.Address
	Candidate common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterWithdrawFromUnbondedCandidate is a free log retrieval operation binding the contract event 0x585e40624b400c05be4193af453d2fd2e69facd17163bda6afd44546f3dbbaa8.
//
// Solidity: event WithdrawFromUnbondedCandidate(address indexed delegator, address indexed candidate, uint256 amount)
func (_Guard *GuardFilterer) FilterWithdrawFromUnbondedCandidate(opts *bind.FilterOpts, delegator []common.Address, candidate []common.Address) (*GuardWithdrawFromUnbondedCandidateIterator, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var candidateRule []interface{}
	for _, candidateItem := range candidate {
		candidateRule = append(candidateRule, candidateItem)
	}

	logs, sub, err := _Guard.contract.FilterLogs(opts, "WithdrawFromUnbondedCandidate", delegatorRule, candidateRule)
	if err != nil {
		return nil, err
	}
	return &GuardWithdrawFromUnbondedCandidateIterator{contract: _Guard.contract, event: "WithdrawFromUnbondedCandidate", logs: logs, sub: sub}, nil
}

// WatchWithdrawFromUnbondedCandidate is a free log subscription operation binding the contract event 0x585e40624b400c05be4193af453d2fd2e69facd17163bda6afd44546f3dbbaa8.
//
// Solidity: event WithdrawFromUnbondedCandidate(address indexed delegator, address indexed candidate, uint256 amount)
func (_Guard *GuardFilterer) WatchWithdrawFromUnbondedCandidate(opts *bind.WatchOpts, sink chan<- *GuardWithdrawFromUnbondedCandidate, delegator []common.Address, candidate []common.Address) (event.Subscription, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var candidateRule []interface{}
	for _, candidateItem := range candidate {
		candidateRule = append(candidateRule, candidateItem)
	}

	logs, sub, err := _Guard.contract.WatchLogs(opts, "WithdrawFromUnbondedCandidate", delegatorRule, candidateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GuardWithdrawFromUnbondedCandidate)
				if err := _Guard.contract.UnpackLog(event, "WithdrawFromUnbondedCandidate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawFromUnbondedCandidate is a log parse operation binding the contract event 0x585e40624b400c05be4193af453d2fd2e69facd17163bda6afd44546f3dbbaa8.
//
// Solidity: event WithdrawFromUnbondedCandidate(address indexed delegator, address indexed candidate, uint256 amount)
func (_Guard *GuardFilterer) ParseWithdrawFromUnbondedCandidate(log types.Log) (*GuardWithdrawFromUnbondedCandidate, error) {
	event := new(GuardWithdrawFromUnbondedCandidate)
	if err := _Guard.contract.UnpackLog(event, "WithdrawFromUnbondedCandidate", log); err != nil {
		return nil, err
	}
	return event, nil
}
